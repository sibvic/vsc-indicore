{
    "_G": {
        "body": "_G(${0:...})",
        "description": "5.1,5.2,5.3\n\n_G",
        "prefix": "_G",
        "scope": "source.lua"
    },
    "_VERSION": {
        "body": "_VERSION(${0:...})",
        "description": "5.1,5.2,5.3\n\n_VERSION",
        "prefix": "_VERSION",
        "scope": "source.lua"
    },
    "assert": {
        "body": "assert(${1:v}${2:[, message]})",
        "description": "5.1,5.2,5.3\n\nassert()",
        "prefix": "assert",
        "scope": "source.lua"
    },
    "bit32.arshift": {
        "body": "bit32.arshift(${0:...})",
        "description": "5.2\n\nbit32.arshift (x, disp)",
        "prefix": "bit32.arshift",
        "scope": "source.lua"
    },
    "bit32.band": {
        "body": "bit32.band(${0:...})",
        "description": "5.2\n\nbit32.band (...)",
        "prefix": "bit32.band",
        "scope": "source.lua"
    },
    "bit32.bnot": {
        "body": "bit32.bnot(${0:...})",
        "description": "5.2\n\nbit32.bnot (x)",
        "prefix": "bit32.bnot",
        "scope": "source.lua"
    },
    "bit32.bor": {
        "body": "bit32.bor(${0:...})",
        "description": "5.2\n\nbit32.bor (...)",
        "prefix": "bit32.bor",
        "scope": "source.lua"
    },
    "bit32.btest": {
        "body": "bit32.btest(${0:...})",
        "description": "5.2\n\nbit32.btest (...)",
        "prefix": "bit32.btest",
        "scope": "source.lua"
    },
    "bit32.bxor": {
        "body": "bit32.bxor(${0:...})",
        "description": "5.2\n\nbit32.bxor (...)",
        "prefix": "bit32.bxor",
        "scope": "source.lua"
    },
    "bit32.extract": {
        "body": "bit32.extract(${0:...})",
        "description": "5.2\n\nbit32.extract (n, field [, width])",
        "prefix": "bit32.extract",
        "scope": "source.lua"
    },
    "bit32.lrotate": {
        "body": "bit32.lrotate(${0:...})",
        "description": "5.2\n\nbit32.lrotate (x, disp)",
        "prefix": "bit32.lrotate",
        "scope": "source.lua"
    },
    "bit32.lshift": {
        "body": "bit32.lshift(${0:...})",
        "description": "5.2\n\nbit32.lshift (x, disp)",
        "prefix": "bit32.lshift",
        "scope": "source.lua"
    },
    "bit32.replace": {
        "body": "bit32.replace(${0:...})",
        "description": "5.2\n\nbit32.replace (n, v, field [, width])",
        "prefix": "bit32.replace",
        "scope": "source.lua"
    },
    "bit32.rrotate": {
        "body": "bit32.rrotate(${0:...})",
        "description": "5.2\n\nbit32.rrotate (x, disp)",
        "prefix": "bit32.rrotate",
        "scope": "source.lua"
    },
    "bit32.rshift": {
        "body": "bit32.rshift(${0:...})",
        "description": "5.2\n\nbit32.rshift (x, disp)",
        "prefix": "bit32.rshift",
        "scope": "source.lua"
    },
    "collectgarbage": {
        "body": "collectgarbage(${1:[opt]}${2:[, arg]})",
        "description": "5.1,5.2,5.3\n\ncollectgarbage()",
        "prefix": "collectgarbage",
        "scope": "source.lua"
    },
    "coroutine.create": {
        "body": "coroutine.create( ${1:function} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.create",
        "prefix": "coroutine.create",
        "scope": "source.lua"
    },
    "coroutine.isyieldable": {
        "body": "coroutine.isyieldable( )",
        "description": "5.3\n\ncoroutine.isyieldable",
        "prefix": "coroutine.isyieldable",
        "scope": "source.lua"
    },
    "coroutine.resume": {
        "body": "coroutine.resume( ${1:co}${2:[, val1, \u00b7\u00b7\u00b7]} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.resume",
        "prefix": "coroutine.resume",
        "scope": "source.lua"
    },
    "coroutine.running": {
        "body": "coroutine.running( )",
        "description": "5.1,5.2,5.3\n\ncoroutine.running",
        "prefix": "coroutine.running",
        "scope": "source.lua"
    },
    "coroutine.status": {
        "body": "coroutine.status( ${1:co} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.status",
        "prefix": "coroutine.status",
        "scope": "source.lua"
    },
    "coroutine.wrap": {
        "body": "coroutine.wrap( ${1:function} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.wrap",
        "prefix": "coroutine.wrap",
        "scope": "source.lua"
    },
    "coroutine.yield": {
        "body": "coroutine.yield( ${1:...} )",
        "description": "5.1,5.2,5.3\n\ncoroutine.yield",
        "prefix": "coroutine.yield",
        "scope": "source.lua"
    },
    "debug.debug": {
        "body": "debug.debug()",
        "description": "5.1,5.2,5.3\n\ndebug.debug ()",
        "prefix": "debug.debug",
        "scope": "source.lua"
    },
    "debug.getfenv": {
        "body": "debug.getfenv(${0:...})",
        "description": "5.1\n\ndebug.getfenv (o)",
        "prefix": "debug.getfenv",
        "scope": "source.lua"
    },
    "debug.gethook": {
        "body": "debug.gethook( ${1:[thread]} )",
        "description": "5.1,5.2,5.3\n\ndebug.gethook ([thread])",
        "prefix": "debug.gethook",
        "scope": "source.lua"
    },
    "debug.getinfo": {
        "body": "debug.getinfo( ${1:[thread],}${2:f}${3:[, what]} )",
        "description": "5.1,5.2,5.3\n\ndebug.getinfo ([thread,] f [, what])",
        "prefix": "debug.getinfo",
        "scope": "source.lua"
    },
    "debug.getlocal": {
        "body": "debug.getlocal( ${1:[thread],}${2:f}${3:[, local]} )",
        "description": "5.1,5.2,5.3\n\ndebug.getlocal ([thread,] f, local)",
        "prefix": "debug.getlocal",
        "scope": "source.lua"
    },
    "debug.getmetatable": {
        "body": "debug.getmetatable( ${1:value} )",
        "description": "5.1,5.2,5.3\n\ndebug.getmetatable (value)",
        "prefix": "debug.getmetatable",
        "scope": "source.lua"
    },
    "debug.getregistry": {
        "body": "debug.getregistry()",
        "description": "5.1,5.2,5.3\n\ndebug.getregistry ()",
        "prefix": "debug.getregistry",
        "scope": "source.lua"
    },
    "debug.getupvalue": {
        "body": "debug.getupvalue( ${1:f}, ${2:up} )",
        "description": "5.1,5.2,5.3\n\ndebug.getupvalue (f, up)",
        "prefix": "debug.getupvalue",
        "scope": "source.lua"
    },
    "debug.getuservalue": {
        "body": "debug.getuservalue(${0:...})",
        "description": "5.2,5.3\n\ndebug.getuservalue (u)",
        "prefix": "debug.getuservalue",
        "scope": "source.lua"
    },
    "debug.getuservalue ": {
        "body": "debug.getuservalue ( ${1:u} )",
        "description": "debug.getuservalue (u)",
        "prefix": "debug.getuservalue ",
        "scope": "source.lua"
    },
    "debug.setfenv": {
        "body": "debug.setfenv(${0:...})",
        "description": "5.1\n\ndebug.setfenv (object, table)",
        "prefix": "debug.setfenv",
        "scope": "source.lua"
    },
    "debug.sethook": {
        "body": "debug.sethook( ${1:[thead,]}${2:hook}, ${3:mask}${4:[, count]} )",
        "description": "5.1,5.2,5.3\n\ndebug.sethook ([thread,] hook, mask [, count])",
        "prefix": "debug.sethook",
        "scope": "source.lua"
    },
    "debug.setlocal": {
        "body": "debug.setlocal( ${1:[thead,]}${2:level}, ${3:local}, ${4:value} )",
        "description": "5.1,5.2,5.3\n\ndebug.setlocal ([thread,] level, local, value)",
        "prefix": "debug.setlocal",
        "scope": "source.lua"
    },
    "debug.setmetatable": {
        "body": "debug.setmetatable( ${1:value}, ${2:table} )",
        "description": "5.1,5.2,5.3\n\ndebug.setmetatable (value, table)",
        "prefix": "debug.setmetatable",
        "scope": "source.lua"
    },
    "debug.setupvalue": {
        "body": "debug.setupvalue( ${1:f}, ${2:up}, ${3:value} )",
        "description": "5.1,5.2,5.3\n\ndebug.setupvalue (f, up, value)",
        "prefix": "debug.setupvalue",
        "scope": "source.lua"
    },
    "debug.setuservalue": {
        "body": "debug.setuservalue( ${1:udata}, ${2:value} )",
        "description": "5.2,5.3\n\ndebug.setuservalue (udata, value)",
        "prefix": "debug.setuservalue",
        "scope": "source.lua"
    },
    "debug.traceback": {
        "body": "debug.traceback( ${1:[thread,]}${2:[message]}${3:[, level]} )",
        "description": "5.1,5.2,5.3\n\ndebug.traceback ([thread,] [message [, level]])",
        "prefix": "debug.traceback",
        "scope": "source.lua"
    },
    "debug.upvalueid": {
        "body": "debug.upvalueid( ${1:f}, ${2:n})",
        "description": "5.2,5.3\n\ndebug.upvalueid (f, n)",
        "prefix": "debug.upvalueid",
        "scope": "source.lua"
    },
    "debug.upvaluejoin": {
        "body": "debug.upvaluejoin( ${1:f1}, ${2:n1}, ${3:f2}, ${4:n2} )",
        "description": "5.2,5.3\n\ndebug.upvaluejoin (f1, n1, f2, n2)",
        "prefix": "debug.upvaluejoin",
        "scope": "source.lua"
    },
    "dofile": {
        "body": "dofile(${1:[filename]})",
        "description": "5.1,5.2,5.3\n\ndofile ([filename])",
        "prefix": "dofile",
        "scope": "source.lua"
    },
    "elif": {
        "body": "else if ${1:condition} then\n\t${0:-- body}\n",
        "description": "elif",
        "prefix": "elif",
        "scope": "source.lua"
    },
    "error": {
        "body": "error(${0:...})",
        "description": "5.1,5.2,5.3\n\nerror (message [, level])",
        "prefix": "error",
        "scope": "source.lua"
    },
    "file:close": {
        "body": "file:close(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:close ()",
        "prefix": "file:close",
        "scope": "source.lua"
    },
    "file:flush": {
        "body": "file:flush(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:flush ()",
        "prefix": "file:flush",
        "scope": "source.lua"
    },
    "file:lines": {
        "body": "file:lines(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:lines ()",
        "prefix": "file:lines",
        "scope": "source.lua"
    },
    "file:read": {
        "body": "file:read(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:read (...)",
        "prefix": "file:read",
        "scope": "source.lua"
    },
    "file:seek": {
        "body": "file:seek(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:seek ([whence] [, offset])",
        "prefix": "file:seek",
        "scope": "source.lua"
    },
    "file:setvbuf": {
        "body": "file:setvbuf(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:setvbuf (mode [, size])",
        "prefix": "file:setvbuf",
        "scope": "source.lua"
    },
    "file:write": {
        "body": "file:write(${0:...})",
        "description": "5.1,5.2,5.3\n\nfile:write (...)",
        "prefix": "file:write",
        "scope": "source.lua"
    },
    "for": {
        "body": "for ${1:i}=${2:1},${3:10} do\n\t${0:print(i)}\nend",
        "description": "for i=1,10",
        "prefix": "for",
        "scope": "source.lua"
    },
    "fori": {
        "body": "for ${1:i},${2:v} in ipairs(${3:table_name}) do\n\t${0:print(i,v)}\nend",
        "description": "for i,v in ipairs()",
        "prefix": "fori",
        "scope": "source.lua"
    },
    "forp": {
        "body": "for ${1:k},${2:v} in pairs(${3:table_name}) do\n\t${0:print(k,v)}\nend",
        "description": "for k,v in pairs()",
        "prefix": "forp",
        "scope": "source.lua"
    },
    "fun": {
        "body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend",
        "description": "function",
        "prefix": "fun",
        "scope": "source.lua"
    },
    "function": {
        "body": "function ${1:function_name}( ${2:...} )\n\t${0:-- body}\nend",
        "description": "function",
        "prefix": "function",
        "scope": "source.lua"
    },
    "getfenv": {
        "body": "getfenv(${0:...})",
        "description": "5.1\n\ngetfenv ([f])",
        "prefix": "getfenv",
        "scope": "source.lua"
    },
    "getmetatable": {
        "body": "getmetatable(${1:object})",
        "description": "5.1,5.2,5.3\n\ngetmetatable (object)",
        "prefix": "getmetatable",
        "scope": "source.lua"
    },
    "if": {
        "body": "if ${1:condition} then\n\t${0:-- body}\nend",
        "description": "if",
        "prefix": "if",
        "scope": "source.lua"
    },
    "ifel": {
        "body": "if ${1:condition} then\n\t${2:-- body}\nelse\n\t${0:-- body}\nend",
        "description": "ifel",
        "prefix": "ifel",
        "scope": "source.lua"
    },
    "io.close": {
        "body": "io.close(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.close ([file])",
        "prefix": "io.close",
        "scope": "source.lua"
    },
    "io.flush": {
        "body": "io.flush(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.flush ()",
        "prefix": "io.flush",
        "scope": "source.lua"
    },
    "io.input": {
        "body": "io.input(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.input ([file])",
        "prefix": "io.input",
        "scope": "source.lua"
    },
    "io.lines": {
        "body": "io.lines(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.lines ([filename])",
        "prefix": "io.lines",
        "scope": "source.lua"
    },
    "io.open": {
        "body": "io.open(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.open (filename [, mode])",
        "prefix": "io.open",
        "scope": "source.lua"
    },
    "io.output": {
        "body": "io.output(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.output ([file])",
        "prefix": "io.output",
        "scope": "source.lua"
    },
    "io.popen": {
        "body": "io.popen(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.popen (prog [, mode])",
        "prefix": "io.popen",
        "scope": "source.lua"
    },
    "io.read": {
        "body": "io.read(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.read (...)",
        "prefix": "io.read",
        "scope": "source.lua"
    },
    "io.tmpfile": {
        "body": "io.tmpfile(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.tmpfile ()",
        "prefix": "io.tmpfile",
        "scope": "source.lua"
    },
    "io.type": {
        "body": "io.type(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.type (obj)",
        "prefix": "io.type",
        "scope": "source.lua"
    },
    "io.write": {
        "body": "io.write(${0:...})",
        "description": "5.1,5.2,5.3\n\nio.write (...)",
        "prefix": "io.write",
        "scope": "source.lua"
    },
    "ipairs": {
        "body": "ipairs(${0:...})",
        "description": "5.1,5.2,5.3\n\nipairs (t)",
        "prefix": "ipairs",
        "scope": "source.lua"
    },
    "load": {
        "body": "load(${0:...})",
        "description": "5.1,5.2,5.3\n\nload (func [, chunkname])",
        "prefix": "load",
        "scope": "source.lua"
    },
    "loadfile": {
        "body": "loadfile(${0:...})",
        "description": "5.1,5.2,5.3\n\nloadfile ([filename])",
        "prefix": "loadfile",
        "scope": "source.lua"
    },
    "loadstring": {
        "body": "loadstring(${0:...})",
        "description": "5.1\n\nloadstring (string [, chunkname])",
        "prefix": "loadstring",
        "scope": "source.lua"
    },
    "local": {
        "body": "local ${1:x} = ${0:1}",
        "description": "local x = 1",
        "prefix": "local",
        "scope": "source.lua"
    },
    "math.abs": {
        "body": "math.abs( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.abs",
        "prefix": "math.abs",
        "scope": "source.lua"
    },
    "math.acos": {
        "body": "math.acos( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.acos",
        "prefix": "math.acos",
        "scope": "source.lua"
    },
    "math.asin": {
        "body": "math.asin( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.asin",
        "prefix": "math.asin",
        "scope": "source.lua"
    },
    "math.atan": {
        "body": "math.atan( ${1:y}${2:[, x]} )",
        "description": "5.1,5.2,5.3\n\nmath.atan",
        "prefix": "math.atan",
        "scope": "source.lua"
    },
    "math.atan2": {
        "body": "math.atan2(${0:...})",
        "description": "5.1,5.2\n\nmath.atan2 (y, x)",
        "prefix": "math.atan2",
        "scope": "source.lua"
    },
    "math.ceil": {
        "body": "math.ceil( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.ceil",
        "prefix": "math.ceil",
        "scope": "source.lua"
    },
    "math.cos": {
        "body": "math.cos( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.cos",
        "prefix": "math.cos",
        "scope": "source.lua"
    },
    "math.cosh": {
        "body": "math.cosh(${0:...})",
        "description": "5.1,5.2\n\nmath.cosh (x)",
        "prefix": "math.cosh",
        "scope": "source.lua"
    },
    "math.deg": {
        "body": "math.deg( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.deg",
        "prefix": "math.deg",
        "scope": "source.lua"
    },
    "math.exp": {
        "body": "math.exp( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.exp",
        "prefix": "math.exp",
        "scope": "source.lua"
    },
    "math.floor": {
        "body": "math.floor( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.floor",
        "prefix": "math.floor",
        "scope": "source.lua"
    },
    "math.fmod": {
        "body": "math.fmod( ${1:x},${2:y} )",
        "description": "5.1,5.2,5.3\n\nmath.fmod",
        "prefix": "math.fmod",
        "scope": "source.lua"
    },
    "math.frexp": {
        "body": "math.frexp(${0:...})",
        "description": "5.1,5.2\n\nmath.frexp (x)",
        "prefix": "math.frexp",
        "scope": "source.lua"
    },
    "math.huge": {
        "body": "math.huge(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.huge",
        "prefix": "math.huge",
        "scope": "source.lua"
    },
    "math.ldexp": {
        "body": "math.ldexp(${0:...})",
        "description": "5.1,5.2\n\nmath.ldexp (m, e)",
        "prefix": "math.ldexp",
        "scope": "source.lua"
    },
    "math.log": {
        "body": "math.log( ${1:x}${2:[, base]} )",
        "description": "5.1,5.2,5.3\n\nmath.log",
        "prefix": "math.log",
        "scope": "source.lua"
    },
    "math.log10": {
        "body": "math.log10(${0:...})",
        "description": "5.1\n\nmath.log10 (x)",
        "prefix": "math.log10",
        "scope": "source.lua"
    },
    "math.math.randomseed": {
        "body": "math.math.randomseed( ${1:x} )",
        "description": "math.math.randomseed",
        "prefix": "math.math.randomseed",
        "scope": "source.lua"
    },
    "math.max": {
        "body": "math.max( ${1:x},${2:...} )",
        "description": "5.1,5.2,5.3\n\nmath.max",
        "prefix": "math.max",
        "scope": "source.lua"
    },
    "math.maxinteger": {
        "body": "math.maxinteger(${0:...})",
        "description": "5.3\n\nmath.maxinteger",
        "prefix": "math.maxinteger",
        "scope": "source.lua"
    },
    "math.min": {
        "body": "math.min( ${1:x},${2:...} )",
        "description": "5.1,5.2,5.3\n\nmath.min",
        "prefix": "math.min",
        "scope": "source.lua"
    },
    "math.mininteger": {
        "body": "math.mininteger(${0:...})",
        "description": "5.3\n\nmath.mininteger",
        "prefix": "math.mininteger",
        "scope": "source.lua"
    },
    "math.modf": {
        "body": "math.modf( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.modf",
        "prefix": "math.modf",
        "scope": "source.lua"
    },
    "math.pi": {
        "body": "math.pi(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.pi",
        "prefix": "math.pi",
        "scope": "source.lua"
    },
    "math.pow": {
        "body": "math.pow(${0:...})",
        "description": "5.1,5.2\n\nmath.pow (x, y)",
        "prefix": "math.pow",
        "scope": "source.lua"
    },
    "math.rad": {
        "body": "math.rad(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.rad (x)",
        "prefix": "math.rad",
        "scope": "source.lua"
    },
    "math.random": {
        "body": "math.random( ${1:[m]}${2:[, n]} )",
        "description": "5.1,5.2,5.3\n\nmath.random",
        "prefix": "math.random",
        "scope": "source.lua"
    },
    "math.randomseed": {
        "body": "math.randomseed(${0:...})",
        "description": "5.1,5.2,5.3\n\nmath.randomseed (x)",
        "prefix": "math.randomseed",
        "scope": "source.lua"
    },
    "math.sin": {
        "body": "math.sin( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.sin",
        "prefix": "math.sin",
        "scope": "source.lua"
    },
    "math.sinh": {
        "body": "math.sinh(${0:...})",
        "description": "5.1,5.2\n\nmath.sinh (x)",
        "prefix": "math.sinh",
        "scope": "source.lua"
    },
    "math.sqrt": {
        "body": "math.sqrt( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.sqrt",
        "prefix": "math.sqrt",
        "scope": "source.lua"
    },
    "math.tan": {
        "body": "math.tan( ${1:x} )",
        "description": "5.1,5.2,5.3\n\nmath.tan",
        "prefix": "math.tan",
        "scope": "source.lua"
    },
    "math.tanh": {
        "body": "math.tanh(${0:...})",
        "description": "5.1,5.2\n\nmath.tanh (x)",
        "prefix": "math.tanh",
        "scope": "source.lua"
    },
    "math.tointeger": {
        "body": "math.tointeger( ${1:x} )",
        "description": "5.3\n\nmath.tointeger",
        "prefix": "math.tointeger",
        "scope": "source.lua"
    },
    "math.type": {
        "body": "math.type( ${1:x} )",
        "description": "5.3\n\nmath.type",
        "prefix": "math.type",
        "scope": "source.lua"
    },
    "math.ult": {
        "body": "math.ult(${0:...})",
        "description": "5.3\n\nmath.ult (m, n)",
        "prefix": "math.ult",
        "scope": "source.lua"
    },
    "module": {
        "body": "module(${0:...})",
        "description": "5.1\n\nmodule (name [, ...])",
        "prefix": "module",
        "scope": "source.lua"
    },
    "next": {
        "body": "next(${1:table}${2:[, index]})",
        "description": "5.1,5.2,5.3\n\nnext (table [, index])",
        "prefix": "next",
        "scope": "source.lua"
    },
    "os.clock": {
        "body": "os.clock(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.clock ()",
        "prefix": "os.clock",
        "scope": "source.lua"
    },
    "os.date": {
        "body": "os.date(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.date ([format [, time]])",
        "prefix": "os.date",
        "scope": "source.lua"
    },
    "os.difftime": {
        "body": "os.difftime(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.difftime (t2, t1)",
        "prefix": "os.difftime",
        "scope": "source.lua"
    },
    "os.execute": {
        "body": "os.execute(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.execute ([command])",
        "prefix": "os.execute",
        "scope": "source.lua"
    },
    "os.exit": {
        "body": "os.exit(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.exit ([code])",
        "prefix": "os.exit",
        "scope": "source.lua"
    },
    "os.getenv": {
        "body": "os.getenv(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.getenv (varname)",
        "prefix": "os.getenv",
        "scope": "source.lua"
    },
    "os.remove": {
        "body": "os.remove(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.remove (filename)",
        "prefix": "os.remove",
        "scope": "source.lua"
    },
    "os.rename": {
        "body": "os.rename(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.rename (oldname, newname)",
        "prefix": "os.rename",
        "scope": "source.lua"
    },
    "os.setlocale": {
        "body": "os.setlocale(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.setlocale (locale [, category])",
        "prefix": "os.setlocale",
        "scope": "source.lua"
    },
    "os.time": {
        "body": "os.time(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.time ([table])",
        "prefix": "os.time",
        "scope": "source.lua"
    },
    "os.tmpname": {
        "body": "os.tmpname(${0:...})",
        "description": "5.1,5.2,5.3\n\nos.tmpname ()",
        "prefix": "os.tmpname",
        "scope": "source.lua"
    },
    "package.config": {
        "body": "package.config(${0:...})",
        "description": "5.2,5.3\n\npackage.config",
        "prefix": "package.config",
        "scope": "source.lua"
    },
    "package.cpath": {
        "body": "package.cpath(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.cpath",
        "prefix": "package.cpath",
        "scope": "source.lua"
    },
    "package.loaded": {
        "body": "package.loaded(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.loaded",
        "prefix": "package.loaded",
        "scope": "source.lua"
    },
    "package.loaders": {
        "body": "package.loaders(${0:...})",
        "description": "5.1\n\npackage.loaders",
        "prefix": "package.loaders",
        "scope": "source.lua"
    },
    "package.loadlib": {
        "body": "package.loadlib(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.loadlib (libname, funcname)",
        "prefix": "package.loadlib",
        "scope": "source.lua"
    },
    "package.path": {
        "body": "package.path(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.path",
        "prefix": "package.path",
        "scope": "source.lua"
    },
    "package.preload": {
        "body": "package.preload(${0:...})",
        "description": "5.1,5.2,5.3\n\npackage.preload",
        "prefix": "package.preload",
        "scope": "source.lua"
    },
    "package.searchers": {
        "body": "package.searchers(${0:...})",
        "description": "5.2,5.3\n\npackage.searchers",
        "prefix": "package.searchers",
        "scope": "source.lua"
    },
    "package.searchpath": {
        "body": "package.searchpath(${0:...})",
        "description": "5.2,5.3\n\npackage.searchpath (name, path [, sep [, rep]])",
        "prefix": "package.searchpath",
        "scope": "source.lua"
    },
    "package.seeall": {
        "body": "package.seeall(${0:...})",
        "description": "5.1\n\npackage.seeall (module)",
        "prefix": "package.seeall",
        "scope": "source.lua"
    },
    "pairs": {
        "body": "pairs(${0:...})",
        "description": "5.1,5.2,5.3\n\npairs (t)",
        "prefix": "pairs",
        "scope": "source.lua"
    },
    "pcall": {
        "body": "pcall(${0:...})",
        "description": "5.1,5.2,5.3\n\npcall (f, arg1, ...)",
        "prefix": "pcall",
        "scope": "source.lua"
    },
    "print": {
        "body": "print(${1:...})",
        "description": "5.1,5.2,5.3\n\nprint(...)",
        "prefix": "print",
        "scope": "source.lua"
    },
    "rawequal": {
        "body": "rawequal(${0:...})",
        "description": "5.1,5.2,5.3\n\nrawequal (v1, v2)",
        "prefix": "rawequal",
        "scope": "source.lua"
    },
    "rawget": {
        "body": "rawget(${0:...})",
        "description": "5.1,5.2,5.3\n\nrawget (table, index)",
        "prefix": "rawget",
        "scope": "source.lua"
    },
    "rawlen": {
        "body": "rawlen(${0:...})",
        "description": "5.2,5.3\n\nrawlen (v)",
        "prefix": "rawlen",
        "scope": "source.lua"
    },
    "rawset": {
        "body": "rawset(${0:...})",
        "description": "5.1,5.2,5.3\n\nrawset (table, index, value)",
        "prefix": "rawset",
        "scope": "source.lua"
    },
    "req": {
        "body": "require(\"${1:module}\")",
        "description": "require()",
        "prefix": "req",
        "scope": "source.lua"
    },
    "require": {
        "body": "require(\"${1:module}\")",
        "description": "5.1,5.2,5.3\n\nrequire()",
        "prefix": "require",
        "scope": "source.lua"
    },
    "ret": {
        "body": "return ${1:...}",
        "description": "return ...",
        "prefix": "ret",
        "scope": "source.lua"
    },
    "select": {
        "body": "select(${1:index}, ${2:...})",
        "description": "5.1,5.2,5.3\n\nselect (index, \u00b7\u00b7\u00b7)",
        "prefix": "select",
        "scope": "source.lua"
    },
    "setfenv": {
        "body": "setfenv(${0:...})",
        "description": "5.1\n\nsetfenv (f, table)",
        "prefix": "setfenv",
        "scope": "source.lua"
    },
    "setmetatable": {
        "body": "setmetatable(${1:table}, ${2:metatable})",
        "description": "5.1,5.2,5.3\n\nsetmetatable (table, metatable)",
        "prefix": "setmetatable",
        "scope": "source.lua"
    },
    "string.byte": {
        "body": "string.byte( ${1:s}${2:[, i]}${3:[, j]} )",
        "description": "5.1,5.2,5.3\n\nstring.byte",
        "prefix": "string.byte",
        "scope": "source.lua"
    },
    "string.char": {
        "body": "string.char( ${1:...} )",
        "description": "5.1,5.2,5.3\n\nstring.char",
        "prefix": "string.char",
        "scope": "source.lua"
    },
    "string.dump": {
        "body": "string.dump(${0:...})",
        "description": "5.1,5.2,5.3\n\nstring.dump (function)",
        "prefix": "string.dump",
        "scope": "source.lua"
    },
    "string.find": {
        "body": "string.find( ${1:s},${2:pattern}${3:[, init]}${4:[, plain]} )",
        "description": "5.1,5.2,5.3\n\nstring.find",
        "prefix": "string.find",
        "scope": "source.lua"
    },
    "string.format": {
        "body": "string.format( \"${1:formatstring}\",${2:...} )",
        "description": "5.1,5.2,5.3\n\nstring.format",
        "prefix": "string.format",
        "scope": "source.lua"
    },
    "string.gmatch": {
        "body": "string.gmatch( ${1:s},${2:pattern} )",
        "description": "5.1,5.2,5.3\n\nstring.gmatch",
        "prefix": "string.gmatch",
        "scope": "source.lua"
    },
    "string.gsub": {
        "body": "string.gsub( ${1:s},${2:pattern},${3:repl}${4:[, n]} )",
        "description": "5.1,5.2,5.3\n\nstring.gsub",
        "prefix": "string.gsub",
        "scope": "source.lua"
    },
    "string.len": {
        "body": "string.len( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.len",
        "prefix": "string.len",
        "scope": "source.lua"
    },
    "string.lower": {
        "body": "string.lower( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.lower",
        "prefix": "string.lower",
        "scope": "source.lua"
    },
    "string.match": {
        "body": "string.match( ${1:s},${2:pattern}${3:[, init]} )",
        "description": "5.1,5.2,5.3\n\nstring.match",
        "prefix": "string.match",
        "scope": "source.lua"
    },
    "string.pack": {
        "body": "string.pack(${0:...})",
        "description": "5.3\n\nstring.pack (fmt, v1, v2, ...)",
        "prefix": "string.pack",
        "scope": "source.lua"
    },
    "string.packsize": {
        "body": "string.packsize(${0:...})",
        "description": "5.3\n\nstring.packsize (fmt)",
        "prefix": "string.packsize",
        "scope": "source.lua"
    },
    "string.rep": {
        "body": "string.rep( ${1:s}, ${2:n}${3:[, rep]} )",
        "description": "5.1,5.2,5.3\n\nstring.rep",
        "prefix": "string.rep",
        "scope": "source.lua"
    },
    "string.reverse": {
        "body": "string.reverse( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.reverse",
        "prefix": "string.reverse",
        "scope": "source.lua"
    },
    "string.sub": {
        "body": "string.sub( ${1:s}, ${2:i}${3:[, j]} )",
        "description": "5.1,5.2,5.3\n\nstring.sub",
        "prefix": "string.sub",
        "scope": "source.lua"
    },
    "string.unpack": {
        "body": "string.unpack(${0:...})",
        "description": "5.3\n\nstring.unpack (fmt, s [, pos])",
        "prefix": "string.unpack",
        "scope": "source.lua"
    },
    "string.upper": {
        "body": "string.upper( ${1:s} )",
        "description": "5.1,5.2,5.3\n\nstring.upper",
        "prefix": "string.upper",
        "scope": "source.lua"
    },
    "table.concat": {
        "body": "table.concat( ${1:tablename}${2:, \", \"}${3:, start_index}${4:, end_index} )",
        "description": "5.1,5.2,5.3\n\ntable.concat",
        "prefix": "table.concat",
        "scope": "source.lua"
    },
    "table.insert": {
        "body": "table.insert( ${1:list},${2: [pos,]}${3: value} )",
        "description": "5.1,5.2,5.3\n\ntable.insert",
        "prefix": "table.insert",
        "scope": "source.lua"
    },
    "table.maxn": {
        "body": "table.maxn(${0:...})",
        "description": "5.1\n\ntable.maxn (table)",
        "prefix": "table.maxn",
        "scope": "source.lua"
    },
    "table.move": {
        "body": "table.move(${0:...})",
        "description": "5.3\n\ntable.move (a1, f, e, t [,a2])",
        "prefix": "table.move",
        "scope": "source.lua"
    },
    "table.pack": {
        "body": "table.pack(${0:...})",
        "description": "5.2,5.3\n\ntable.pack (...)",
        "prefix": "table.pack",
        "scope": "source.lua"
    },
    "table.remove": {
        "body": "table.remove( ${1:list},${2: [pos,]} )",
        "description": "5.1,5.2,5.3\n\ntable.remove",
        "prefix": "table.remove",
        "scope": "source.lua"
    },
    "table.sort": {
        "body": "table.sort( ${1:tablename}${2:, sortfunction} )",
        "description": "5.1,5.2,5.3\n\ntable.sort",
        "prefix": "table.sort",
        "scope": "source.lua"
    },
    "table.unpack": {
        "body": "table.unpack(${0:...})",
        "description": "5.2,5.3\n\ntable.unpack (list [, i [, j]])",
        "prefix": "table.unpack",
        "scope": "source.lua"
    },
    "tonumber": {
        "body": "tonumber(${1:e}${2:[, base]})",
        "description": "5.1,5.2,5.3\n\ntonumber (e [, base])",
        "prefix": "tonumber",
        "scope": "source.lua"
    },
    "tostring": {
        "body": "tostring(${1:v})",
        "description": "5.1,5.2,5.3\n\ntostring (v)",
        "prefix": "tostring",
        "scope": "source.lua"
    },
    "type": {
        "body": "type(${1:v})",
        "description": "5.1,5.2,5.3\n\ntype (v)",
        "prefix": "type",
        "scope": "source.lua"
    },
    "unpack": {
        "body": "unpack(${0:...})",
        "description": "5.1\n\nunpack (list [, i [, j]])",
        "prefix": "unpack",
        "scope": "source.lua"
    },
    "utf8.char": {
        "body": "utf8.char(${0:...})",
        "description": "5.3\n\nutf8.char (...)",
        "prefix": "utf8.char",
        "scope": "source.lua"
    },
    "utf8.charpattern": {
        "body": "utf8.charpattern(${0:...})",
        "description": "5.3\n\nutf8.charpattern",
        "prefix": "utf8.charpattern",
        "scope": "source.lua"
    },
    "utf8.codepoint": {
        "body": "utf8.codepoint(${0:...})",
        "description": "5.3\n\nutf8.codepoint (s [, i [, j]])",
        "prefix": "utf8.codepoint",
        "scope": "source.lua"
    },
    "utf8.codes": {
        "body": "utf8.codes(${0:...})",
        "description": "5.3\n\nutf8.codes (s)",
        "prefix": "utf8.codes",
        "scope": "source.lua"
    },
    "utf8.len": {
        "body": "utf8.len(${0:...})",
        "description": "5.3\n\nutf8.len (s [, i [, j]])",
        "prefix": "utf8.len",
        "scope": "source.lua"
    },
    "utf8.offset": {
        "body": "utf8.offset(${0:...})",
        "description": "5.3\n\nutf8.offset (s, n [, i])",
        "prefix": "utf8.offset",
        "scope": "source.lua"
    },
    "ver": {
        "body": "_VERSION",
        "description": "_VERSION",
        "prefix": "ver",
        "scope": "source.lua"
    },
    "version": {
        "body": "_VERSION",
        "description": "_VERSION",
        "prefix": "version",
        "scope": "source.lua"
    },
    "xpcall": {
        "body": "xpcall(${0:...})",
        "description": "5.1,5.2,5.3\n\nxpcall (f, err)",
        "prefix": "xpcall",
        "scope": "source.lua"
    },
    "core.getcandle": {
        "body": "core.getcandle(${1:barSize}, ${2:datetime}, ${3:tradingDayOffset}, ${4:tradingWeekOffset})",
        "description": "Gets the begin and end of the candle to which the specified date belongs",
        "prefix": "core.getcandle",
        "scope": "source.lua"
    },
    "core.crossesOver": {
        "body": "core.crossesOver(${1:stream1}, ${2:stream2}, ${3:period1}${4:[, period2]})",
        "description": "Checks whether one stream crosses over the other stream at the specified position",
        "prefix": "core.crossesOver",
        "scope": "source.lua"
    },
    "core.crosses": {
        "body": "core.crosses(${1:stream1}, ${2:stream2}, ${3:period1}${4:[, period2]})",
        "description": "Checks whether one stream crosses the other stream in any direction at the specified position",
        "prefix": "core.crosses",
        "scope": "source.lua"
    },
    "core.crossesOverOrTouch": {
        "body": "core.crossesOverOrTouch(${1:stream1}, ${2:stream2}, ${3:period1}${4:[, period2]})",
        "description": "Checks whether one stream crosses over or touches the other stream at the specified position",
        "prefix": "core.crossesOverOrTouch",
        "scope": "source.lua"
    },
    "core.crossesUnder": {
        "body": "core.crossesUnder(${1:stream1}, ${2:stream2}, ${3:period1}${4:[, period2]})",
        "description": "Checks whether one stream crosses under the other stream at the specified position",
        "prefix": "core.crossesUnder",
        "scope": "source.lua"
    },
    "core.crossesUnderOrTouch": {
        "body": "core.crossesUnderOrTouch(${1:stream1}, ${2:stream2}, ${3:period1}${4:[, period2]})",
        "description": "Checks whether one stream crosses under or touches the other stream at the specified position",
        "prefix": "core.crossesUnderOrTouch",
        "scope": "source.lua"
    },
    "host:trace": {
        "body": "host:trace(${1:string}${2:[, ...]})",
        "description": "Puts the string into the default application output stream",
        "prefix": "host:trace",
        "scope": "source.lua"
    },
    "tradingOffsets": {
        "body": 
        [
            "{$1:tradingWeekOffset} = core.host:execute(\"getTradingWeekOffset\");",
            "{$2:tradingDayOffset} = core.host:execute(\"getTradingDayOffset\");"
        ],
        "description": "Returns an offset of the trading week start.",
        "prefix": "tradingOffsets",
        "scope": "source.lua"
    },
    "host:execute(\"getTradingWeekOffset\")": {
        "body": "host:execute(\"getTradingWeekOffset\")",
        "description": "Returns an offset of the trading week start.",
        "prefix": "host:execute(\"getTradingWeekOffset",
        "scope": "source.lua"
    },
    "host:execute(\"stop\")": {
        "body": "host:execute(\"stop\")",
        "description": "Stops the strategy which executed the command.",
        "prefix": "host:execute(\"stop",
        "scope": "source.lua"
    },
    "host:execute(\"isTableFilled\", tableId)": {
        "body": "host:execute(\"isTableFilled\", ${1:tableId})",
        "description": "Checks whether the table content is filled and ready to use.",
        "prefix": "host:execute(\"isTableFilled",
        "scope": "source.lua"
    },
    "host:execute(\"killTimer\", id)": {
        "body": "host:execute(\"killTimer\", ${1:id})",
        "description": "Kills the timer.",
        "prefix": "host:execute(\"killTimer",
        "scope": "source.lua"
    },
    "host:execute(\"getServerTime\")": {
        "body": "host:execute(\"getServerTime\")",
        "description": "Gets the date/time of the server.",
        "prefix": "host:execute(\"getServerTime",
        "scope": "source.lua"
    },
    "host:execute(\"removeAll\")": {
        "body": "host:execute(\"removeAll\")",
        "description": "Removes all lines and labels created using the execute method.",
        "prefix": "host:execute(\"removeAll",
        "scope": "source.lua"
    },
    "host:execute(\"addCommand\", cookie, text, comment)": {
        "body": "host:execute(\"addCommand\", ${1:cookie}, ${2:text}, ${3:comment})",
        "description": "Adds a custom command.",
        "prefix": "host:execute(\"addCommand",
        "scope": "source.lua"
    },
    "host:execute(\"attachOuputToChart\", id)": {
        "body": "host:execute(\"attachOuputToChart\", ${1:id})",
        "description": "Attaches a line output stream or grouped streams of an oscillator to the main chart window.",
        "prefix": "host:execute(\"attachOuputToChart",
        "scope": "source.lua"
    },
    "host:execute(\"attachTextToChart\", id)": {
        "body": "host:execute(\"attachTextToChart\", ${1:id})",
        "description": "Attaches a text output of an oscillator to the main chart window.",
        "prefix": "host:execute(\"attachTextToChart",
        "scope": "source.lua"
    },
    "host:execute(\"calculateDate\", stream, index)": {
        "body": "host:execute(\"calculateDate\", ${1:stream}, ${2:index})",
        "description": "Calculates the date in the stream.",
        "prefix": "host:execute(\"calculateDate",
        "scope": "source.lua"
    },
    "context:drawRectangle(pen, brush, x1, y1, x2, y2, transparency?)": {
        "body": "context:drawRectangle(${1:pen}, ${2:brush}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2}${7:[, transparency]})",
        "description": "Draws a rectangle.",
        "prefix": "context:drawRectangle(",
        "scope": "source.lua"
    },
    "context:createSolidBrush(objid, color)": {
        "body": "context:createSolidBrush(${1:objid}, ${2:color})",
        "description": "Creates a GDI colored brush.",
        "prefix": "context:createSolidBrush(",
        "scope": "source.lua"
    },
    "context.DASH": {
        "body": "context.DASH",
        "description": "The style of the pen (dashed line).",
        "prefix": "context.DASH",
        "scope": "source.lua"
    },
    "tick_stream:pipSize": {
        "body": ":pipSize()",
        "description": "The method returns the smallest possible change of the instrument price.",
        "prefix": ":pipSize",
        "scope": "source.lua"
    },
    "mathex.max": {
        "body": "mathex.max(${1:stream}, ${2:range}${3:, [to?]})",
        "description": "Finds the maximal value and its position in the specified stream and in the specified range.",
        "prefix": "mathex.max",
        "scope": "source.lua"
    },
    "mathex.min": {
        "body": "mathex.min(${1:stream}, ${2:range}${3:, [to?]})",
        "description": "Finds the minimal value and its position in the specified stream and in the specified range.",
        "prefix": "mathex.min",
        "scope": "source.lua"
    },
    "AsyncOperationFinished": {
        "body": "function AsyncOperationFinished(${1:cookie}, ${2:successful}, ${3:message}, ${4:message1}, ${5:message2})",
        "description": "The notification that an asynchronous operation is finished.",
        "prefix": "function AsyncOperationFinished",
        "scope": "source.lua"
    },
    "close": {
        "body": ".close",
        "description": "The stream of close prices.",
        "prefix": ".close",
        "scope": "source.lua"
    },
    "high": {
        "body": ".high",
        "description": "The stream of high prices.",
        "prefix": ".high",
        "scope": "source.lua"
    },
    "low": {
        "body": ".low",
        "description": "The stream of low prices.",
        "prefix": ".low",
        "scope": "source.lua"
    },
    "median": {
        "body": ".median",
        "description": "The stream of median prices.",
        "prefix": ".median",
        "scope": "source.lua"
    },
    "open": {
        "body": ".open",
        "description": "The stream of open prices.",
        "prefix": ".open",
        "scope": "source.lua"
    },
    "typical": {
        "body": ".typical",
        "description": "The stream of typical prices.",
        "prefix": ".typical",
        "scope": "source.lua"
    },
    "volume": {
        "body": ".volume",
        "description": "The stream of volumes.",
        "prefix": ".volume",
        "scope": "source.lua"
    },
    "weighted": {
        "body": ".weighted",
        "description": "The stream of weighted prices.",
        "prefix": ".weighted",
        "scope": "source.lua"
    },
    "getAll": {
        "body": ":getAll(${1:index})",
        "description": "The method returns the Open, High, Low, and Close values of the specified period.",
        "prefix": "getAll(",
        "scope": "source.lua"
    },
    "supportsVolume": {
        "body": ":supportsVolume()",
        "description": "The method checks whether the stream supports the trading volume.",
        "prefix": "supportsVolume(",
        "scope": "source.lua"
    },
    "ChangeParameters": {
        "body": "function ChangeParameters()",
        "description": "The notification that the parameter set has been changed on the fly.",
        "prefix": "function ChangeParameters(",
        "scope": "source.lua"
    },
    "CheckParameters": {
        "body": "function CheckParameters(${1:parameters})",
        "description": "The request to check the parameters before changing the parameters on the fly.",
        "prefix": "function CheckParameters(",
        "scope": "source.lua"
    },
    "Click": {
        "body": "function Click(${1:x}, ${2:y}, ${3:price}, ${4:date})",
        "description": "Mouse Button Click Event.",
        "prefix": "function Click(",
        "scope": "source.lua"
    },
    "CreationStarted": {
        "body": "function CreationStarted()",
        "description": "The start of tool initialization.",
        "prefix": "function CreationStarted(",
        "scope": "source.lua"
    },
    "CreationFinished": {
        "body": "function CreationFinished()",
        "description": "The finish of tool initialization.",
        "prefix": "function CreationFinished(",
        "scope": "source.lua"
    },
    "Drag": {
        "body": "function Drag(${1:x}, ${2:y}, ${3:price}, ${4:date})",
        "description": "Mouse Drag Event.",
        "prefix": "function Drag(",
        "scope": "source.lua"
    },
    "DoubleClick": {
        "body": "function DoubleClick(${1:x}, ${2:y}, ${3:price}, ${4:date})",
        "description": "Mouse Drag Event.",
        "prefix": "function DoubleClick(",
        "scope": "source.lua"
    },
    "DragEnd": {
        "body": "function DragEnd(${1:x}, ${2:y}, ${3:price}, ${4:date})",
        "description": "Mouse Button Double Click Event.",
        "prefix": "function DragEnd(",
        "scope": "source.lua"
    },
    "MoveStart": {
        "body": "function MoveStart()",
        "description": "The start of shape of tool moving.",
        "prefix": "function MoveStart(",
        "scope": "source.lua"
    },
    "Move": {
        "body": "function Move(${1:x}, ${2:y}, ${3:price}, ${4:date})",
        "description": "The moving of shape of tool.",
        "prefix": "function Move(",
        "scope": "source.lua"
    },
    "MoveFinished": {
        "body": "function MoveFinished()",
        "description": "The finish of shape of tool moving.",
        "prefix": "function MoveFinished(",
        "scope": "source.lua"
    },
    "MoveReferencePointStart": {
        "body": "function MoveReferencePointStart(${1:pointID})",
        "description": "The start of reference point moving.",
        "prefix": "function MoveReferencePointStart(",
        "scope": "source.lua"
    },
    "MoveReferencePoint": {
        "body": "function MoveReferencePoint(${1:x}, ${2:y}, ${3:price}, ${4:date})",
        "description": "The moving of shape of tool.",
        "prefix": "function MoveReferencePoint(",
        "scope": "source.lua"
    },
    "MoveReferencePointFinished": {
        "body": "MoveReferencePointFinished()",
        "description": "The finish of reference point moving.",
        "prefix": "function MoveReferencePointFinished(",
        "scope": "source.lua"
    },
    "indicatorPrepare": {
        "body": 
        [
            "function Prepare(${1:nameOnly})",
            "    source = instance.source;",
            "    local name = string.format(\"%s(%s)\", profile:id(), source:name());",
            "    instance:name(name);",
            "    if nameOnly then",
            "        return ;",
            "    end",
            "end"
        ],
        "description": "The tool initialization.",
        "prefix": "indicatorPrepare",
        "scope": "source.lua"
    },
    "ReleaseInstance": {
        "body": "function ReleaseInstance()",
        "description": "The tool instance finalization.",
        "prefix": "function ReleaseInstance(",
        "scope": "source.lua"
    },
    "context.DASHDOT": {
        "body": "context.DASHDOT",
        "description": "The style of the pen (line or alternating dashes and dots).",
        "prefix": "context.DASHDOT",
        "scope": "source.lua"
    },
    "context.DOT": {
        "body": "context.DOT",
        "description": "The style of the pen (dotted line).",
        "prefix": "context.DOT",
        "scope": "source.lua"
    },
    "context.SOLID": {
        "body": "context.SOLID",
        "description": "The style of the pen (solid line).",
        "prefix": "context.SOLID",
        "scope": "source.lua"
    },
    "context:bottom": {
        "body": "context:bottom()",
        "description": "Returns Y coordinate of the bottom-right corner of the chart area.",
        "prefix": "context:bottom(",
        "scope": "source.lua"
    },
    "context:convertPenStyle": {
        "body": "context:convertPenStyle(${1:penStyle})",
        "description": "Converts old core line styles into context pen style.",
        "prefix": "context:convertPenStyle(",
        "scope": "source.lua"
    },
    "context:convertTransparency": {
        "body": "context:convertTransparency(${1:transparency})",
        "description": "Converts the transparency from 0-100 range to 0-255 range.",
        "prefix": "context:convertTransparency(",
        "scope": "source.lua"
    },
    "context:createFont": {
        "body": "context:createFont(${1:objid}, ${2:faceName}, ${3:width}, ${4:height}, ${5:style})",
        "description": "Creates a GDI font.",
        "prefix": "context:createFont(",
        "scope": "source.lua"
    },
    "context:createHatchBrush": {
        "body": "context:createHatchBrush(${1:objid}, ${2:style}, ${3:color})",
        "description": "Creates a GDI pattern brush.",
        "prefix": "context:createHatchBrush(",
        "scope": "source.lua"
    },
    "context:createPen": {
        "body": "context:createPen(${1:objid}, ${2:style}, ${3:width}, ${4:color})",
        "description": "Creates a GDI pen.",
        "prefix": "context:createPen(",
        "scope": "source.lua"
    },
    "context:createPoints": {
        "body": "context:createPoints()",
        "description": "Creates a collection of the points for polygon/polyline drawing.",
        "prefix": "context:createPoints(",
        "scope": "source.lua"
    },
    "context:deleteObject": {
        "body": "context:deleteObject(${1:objid})",
        "description": "Deletes a GDI object.",
        "prefix": "context:deleteObject(",
        "scope": "source.lua"
    },
    "context:drawArc": {
        "body": "context:drawArc(${1:pen}, ${2:brush}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2}, ${7:x3}, ${8:y3}, ${9:x4}, ${10:y4}${11:[, transparency?]})",
        "description": "Draws an arc.",
        "prefix": "context:drawArc(",
        "scope": "source.lua"
    },
    "context:drawBezierLine": {
        "body": "context:drawBezierLine(${1:pen}, ${2:points}${3:[, transparency?]})",
        "description": "Draws a cubic Bezier line.",
        "prefix": "context:drawBezierLine(",
        "scope": "source.lua"
    },
    "context:drawBezierShape": {
        "body": "context:drawBezierShape(${1:pen}, ${2:brush}, ${3:points}${4:[, transparency?]})",
        "description": "Draws and fills a cubic Bezier shape.",
        "prefix": "context:drawBezierShape(",
        "scope": "source.lua"
    },
    "context:drawEllipse": {
        "body": "context:drawEllipse(${1:pen}, ${2:brush}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2}${7:[, transparency?]})",
        "description": "Draws an ellipse.",
        "prefix": "context:drawEllipse(",
        "scope": "source.lua"
    },
    "context:drawGradientRectangle": {
        "body": "context:drawGradientRectangle(${1:x1}, ${2:y1}, ${3:color1}, ${4:x2}, ${5:y2}, ${6:color2}, ${7:x3}, ${8:y3}, ${9:color3}, ${10:x4}, ${11:y4}, ${12:color4}${13:[, transparency?]})",
        "description": "Draws a gradient-filled rectangle.",
        "prefix": "context:drawGradientRectangle(",
        "scope": "source.lua"
    },
    "context:drawGradientTriangle": {
        "body": "context:drawGradientTriangle(${1:x1}, ${2:y1}, ${3:color1}, ${4:x2}, ${5:y2}, ${6:color2}, ${7:x3}, ${8:y3}, ${9:color3}${13:[, transparency?]})",
        "description": "Draws a gradient-filled triangle.",
        "prefix": "context:drawGradientTriangle(",
        "scope": "source.lua"
    },
    "context:drawIcon": {
        "body": "context:drawIcon(${1:icon}, ${2:x}, ${3:y}${4:[, transparency?]})",
        "description": "Draws an icon.",
        "prefix": "context:drawIcon(",
        "scope": "source.lua"
    },
    "context:drawLine": {
        "body": "context:drawLine(${1:pen}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}${6:[, transparency?]})",
        "description": "Draws a line.",
        "prefix": "context:drawLine(",
        "scope": "source.lua"
    },
    "context:drawPicture": {
        "body": "context:drawPicture(${1:picture}, ${2:x}, ${3:y}${4:[, transparency?]})",
        "description": "Draws a picture.",
        "prefix": "context:drawPicture(",
        "scope": "source.lua"
    },
    "context:drawPictureTransparentBackground": {
        "body": "context:drawPictureTransparentBackground(${1:picture}, ${2:x}, ${3:y}, ${4:bgColor}${5:[, transparency?]})",
        "description": "Draws a picture using a color as a transparent background.",
        "prefix": "context:drawPictureTransparentBackground(",
        "scope": "source.lua"
    },
    "context:drawPolygon": {
        "body": "context:drawPolygon(${1:pen}, ${2:brush}, ${3:points}${4:[, transparency?]})",
        "description": "Draws a polygon.",
        "prefix": "context:drawPolygon(",
        "scope": "source.lua"
    },
    "context:drawPolyline": {
        "body": "context:drawPolyline(${1:pen}, ${2:points}${3:[, transparency?]})",
        "description": "Draws a polyline (a multi-segment zigzag line).",
        "prefix": "context:drawPolyline(",
        "scope": "source.lua"
    },
    "context:drawText": {
        "body": "context:drawText(${1:font}, ${2:text}, ${3:color}, ${4:background}, ${5:x1}, ${6:y1}, ${7:x2}, ${8:y2}, ${9:style}${10:[, transparency?]})",
        "description": "Draws a text.",
        "prefix": "context:drawText(",
        "scope": "source.lua"
    },
    "context:firstBar": {
        "body": "context:firstBar()",
        "description": "Returns the index of the first bar of the indicator source visible on the chart.",
        "prefix": "context:firstBar(",
        "scope": "source.lua"
    },
    "context:indexOfBar": {
        "body": "context:indexOfBar(${1:x})",
        "description": "Gets index of the bar by its position in the chart area.",
        "prefix": "context:indexOfBar(",
        "scope": "source.lua"
    },
    "context:lastBar": {
        "body": "context:lastBar()",
        "description": "Returns the index of the last bar of the indicator source visible on the chart.",
        "prefix": "context:lastBar(",
        "scope": "source.lua"
    },
    "context:left": {
        "body": "context:left()",
        "description": "Returns X coordinate of top-left corner of the chart area.",
        "prefix": "context:left(",
        "scope": "source.lua"
    },
    "context:loadIcon": {
        "body": "context:loadIcon(${1:objid}, ${2:file})",
        "description": "Loads a GDI icon from the file.",
        "prefix": "context:loadIcon(",
        "scope": "source.lua"
    },
    "context:loadPicture": {
        "body": "context:loadPicture(${1:objid}, ${2:file})",
        "description": "Loads a GDI picture from the file.",
        "prefix": "context:loadPicture(",
        "scope": "source.lua"
    },
    "context:maxPrice": {
        "body": "context:maxPrice()",
        "description": "Returns a maximum price visible on vertical axis.",
        "prefix": "context:maxPrice(",
        "scope": "source.lua"
    },
    "context:measureText": {
        "body": "context:measureText(${1:font}, ${2:text}, ${3:style})",
        "description": "Calculates width and height of the text.",
        "prefix": "context:measureText(",
        "scope": "source.lua"
    },
    "context:minPrice": {
        "body": "context:minPrice()",
        "description": "Returns a minimum price visible on vertical axis.",
        "prefix": "context:minPrice(",
        "scope": "source.lua"
    },
    "context:nextBar": {
        "body": "context:nextBar()",
        "description": "Gets the next bar in the enumeration of the visible bars.",
        "prefix": "context:nextBar(",
        "scope": "source.lua"
    },
    "context:pixelsToPoints": {
        "body": "context:pixelsToPoints(${1:pixels})",
        "description": "Converts pixels into polygraphic points.",
        "prefix": "context:pixelsToPoints(",
        "scope": "source.lua"
    },
    "context:pointOfPrice": {
        "body": "context:pointOfPrice(${1:price})",
        "description": "The method returns the position of the price on the chart area.",
        "prefix": "context:pointOfPrice(",
        "scope": "source.lua"
    },
    "context:pointsToPixels": {
        "body": "context:pointsToPixels(${1:points})",
        "description": "Converts polygraphic points into pixels.",
        "prefix": "context:pointsToPixels(",
        "scope": "source.lua"
    },
    "context:positionOfBar": {
        "body": "context:positionOfBar(${1:index})",
        "description": "Get the position of the bar on the chart area by the bar index.",
        "prefix": "context:positionOfBar(",
        "scope": "source.lua"
    },
    "context:positionOfDate": {
        "body": "context:positionOfDate(${1:date})",
        "description": "Get the position of the bar on the chart area by the date.",
        "prefix": "context:positionOfDate(",
        "scope": "source.lua"
    },
    "context:priceOfPoint": {
        "body": "context:priceOfPoint(${1:y})",
        "description": "The method return the price by its position on the chart area.",
        "prefix": "context:priceOfPoint(",
        "scope": "source.lua"
    },
    "context:priceWidth": {
        "body": "context:priceWidth(${1:start}, ${2:end})",
        "description": "Returns the width of the price band in pixels.",
        "prefix": "context:priceWidth(",
        "scope": "source.lua"
    },
    "context:resetClipRectangle": {
        "body": "context:resetClipRectangle()",
        "description": "Removes clip rectangle.",
        "prefix": "context:resetClipRectangle(",
        "scope": "source.lua"
    },
    "context:right": {
        "body": "context:right()",
        "description": "Returns X coordinate of bottom-right corner of the chart area.",
        "prefix": "context:right(",
        "scope": "source.lua"
    },
    "context:setClipRectangle": {
        "body": "context:setClipRectangle(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})",
        "description": "Sets clip rectangle.",
        "prefix": "context:setClipRectangle(",
        "scope": "source.lua"
    },
    "context:setPixel": {
        "body": "context:setPixel(${1:x}, ${2:y}, ${3:color}${4:[, transparency?]})",
        "description": "Draws a pixel.",
        "prefix": "context:setPixel(",
        "scope": "source.lua"
    },
    "context:startEnumeration": {
        "body": "context:startEnumeration()",
        "description": "Initializes the enumeration of the visible bars.",
        "prefix": "context:startEnumeration(",
        "scope": "source.lua"
    },
    "context:top": {
        "body": "context:top()",
        "description": "Returns Y coordinate of top-left corner of the chart area.",
        "prefix": "context:top(",
        "scope": "source.lua"
    },
    "core": {
        "body": "core",
        "description": "The core functions and constants.",
        "prefix": "core",
        "scope": "source.lua"
    },
    "core.ASYNC_REDRAW": {
        "body": "core.ASYNC_REDRAW",
        "description": "The flag indicating that the indicator must be redrawn after async notification.",
        "prefix": "core.ASYNC_REDRAW",
        "scope": "source.lua"
    },
    "core.Bar": {
        "body": "core.Bar",
        "description": "The type of the indicator required source or of the output.",
        "prefix": "core.Bar",
        "scope": "source.lua"
    },
    "core.Both": {
        "body": "core.Both",
        "description": "The type of the strategy.",
        "prefix": "core.Both",
        "scope": "source.lua"
    },
    "core.COLOR_BACKGROUND": {
        "body": "core.COLOR_BACKGROUND",
        "description": "The identifier of the color (default color of chart background).",
        "prefix": "core.COLOR_BACKGROUND",
        "scope": "source.lua"
    },
    "core.COLOR_CUSTOMLEVEL": {
        "body": "core.COLOR_CUSTOMLEVEL",
        "description": "The identifier of the color (default color of custom level lines).",
        "prefix": "core.COLOR_CUSTOMLEVEL",
        "scope": "source.lua"
    },
    "core.COLOR_DOWNCANDLE": {
        "body": "core.COLOR_DOWNCANDLE",
        "description": "The identifier of the color (default color of descending candles).",
        "prefix": "core.COLOR_DOWNCANDLE",
        "scope": "source.lua"
    },
    "core.COLOR_LABEL": {
        "body": "core.COLOR_LABEL",
        "description": "The identifier of the color (default color of labels).",
        "prefix": "core.COLOR_LABEL",
        "scope": "source.lua"
    },
    "core.COLOR_LINE": {
        "body": "core.COLOR_LINE",
        "description": "The identifier of the color (default color of lines).",
        "prefix": "core.COLOR_LINE",
        "scope": "source.lua"
    },
    "core.COLOR_UPCANDLE": {
        "body": "core.COLOR_UPCANDLE",
        "description": "The identifier of the color (default color of ascending candles).",
        "prefix": "core.COLOR_UPCANDLE",
        "scope": "source.lua"
    },
    "core.colors": {
        "body": "core.colors()",
        "description": "Creates an color table.",
        "prefix": "core.colors(",
        "scope": "source.lua"
    },
    "core.CR_BOTTOM": {
        "body": "core.CR_BOTTOM",
        "description": "The type of the label coordinate.",
        "prefix": "core.CR_BOTTOM",
        "scope": "source.lua"
    },
    "core.CR_CENTER": {
        "body": "core.CR_CENTER",
        "description": "The type of the label coordinate.",
        "prefix": "core.CR_CENTER",
        "scope": "source.lua"
    },
    "core.CR_CHART": {
        "body": "core.CR_CHART",
        "description": "The type of the label coordinate.",
        "prefix": "core.CR_CHART",
        "scope": "source.lua"
    },
    "core.CR_LEFT": {
        "body": "core.CR_LEFT",
        "description": "The type of the label coordinate.",
        "prefix": "core.CR_LEFT",
        "scope": "source.lua"
    },
    "core.CR_RIGHT": {
        "body": "core.CR_RIGHT",
        "description": "The type of the label coordinate.",
        "prefix": "core.CR_RIGHT",
        "scope": "source.lua"
    },
    "core.CR_TOP": {
        "body": "core.CR_TOP",
        "description": "The type of the label coordinate.",
        "prefix": "core.CR_TOP",
        "scope": "source.lua"
    },
    "core.Dot": {
        "body": "core.Dot",
        "description": "The type of the indicator output.",
        "prefix": "core.Dot",
        "scope": "source.lua"
    },
    "core.FLAG_ACCOUNT": {
        "body": "core.FLAG_ACCOUNT",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_ACCOUNT",
        "scope": "source.lua"
    },
    "core.FLAG_ALLOW_TRADE": {
        "body": "core.FLAG_ALLOW_TRADE",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_ALLOW_TRADE",
        "scope": "source.lua"
    },
    "strategyTimeframeParam": {
        "body": 
        [
            "strategy.parameters:addString(\"{1:timeframe}\", \"{2:name}\", \"\", \"{3:m5}\");",
            "strategy.parameters:setFlag(\"{1:timeframe}\", {4|core.FLAG_PERIODS,core.FLAG_BARPERIODS|});"
        ],
        "description": "The parameter behavior flag.",
        "prefix": "strategyTimeframeParam",
        "scope": "source.lua"
    },
    "indicatorTimeframeParam": {
        "body": 
        [
            "indicator.parameters:addString(\"{1:timeframe}\", \"{2:name}\", \"\", \"{3:m5}\");",
            "indicator.parameters:setFlag(\"{1:timeframe}\", {4|core.FLAG_PERIODS,core.FLAG_BARPERIODS|});"
        ],
        "description": "The parameter behavior flag.",
        "prefix": "indicatorTimeframeParam",
        "scope": "source.lua"
    },
    "core.FLAG_BARPERIODS": {
        "body": "core.FLAG_BARPERIODS",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_BARPERIODS",
        "scope": "source.lua"
    },
    "core.FLAG_BARPERIODS_EDIT": {
        "body": "core.FLAG_BARPERIODS_EDIT",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_BARPERIODS_EDIT",
        "scope": "source.lua"
    },
    "core.FLAG_BIDASK": {
        "body": "core.FLAG_BIDASK",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_BIDASK",
        "scope": "source.lua"
    },
    "core.FLAG_DATE": {
        "body": "core.FLAG_DATE",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_DATE",
        "scope": "source.lua"
    },
    "core.FLAG_DATE_OR_NULL": {
        "body": "core.FLAG_DATE_OR_NULL",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_DATE_OR_NULL",
        "scope": "source.lua"
    },
    "core.FLAG_DATETIME": {
        "body": "core.FLAG_DATETIME",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_DATETIME",
        "scope": "source.lua"
    },
    "core.FLAG_DATETIME_OR_NULL": {
        "body": "core.FLAG_DATETIME_OR_NULL",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_DATETIME_OR_NULL",
        "scope": "source.lua"
    },
    "core.FLAG_EMAIL": {
        "body": "core.FLAG_EMAIL",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_EMAIL",
        "scope": "source.lua"
    },
    "core.FLAG_INDICATOR": {
        "body": "core.FLAG_INDICATOR",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_INDICATOR",
        "scope": "source.lua"
    },
    "core.FLAG_INSTRUMENTS": {
        "body": "core.FLAG_INSTRUMENTS",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_INSTRUMENTS",
        "scope": "source.lua"
    },
    "core.FLAG_LEVEL_STYLE": {
        "body": "core.FLAG_LEVEL_STYLE",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_LEVEL_STYLE",
        "scope": "source.lua"
    },
    "core.FLAG_LINE_STYLE": {
        "body": "core.FLAG_LINE_STYLE",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_LINE_STYLE",
        "scope": "source.lua"
    },
    "core.FLAG_ONLYINDICATORS": {
        "body": "core.FLAG_ONLYINDICATORS",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_ONLYINDICATORS",
        "scope": "source.lua"
    },
    "core.FLAG_ONLYOSCILLATORS": {
        "body": "core.FLAG_ONLYOSCILLATORS",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_ONLYOSCILLATORS",
        "scope": "source.lua"
    },
    "core.FLAG_ORDER": {
        "body": "core.FLAG_ORDER",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_ORDER",
        "scope": "source.lua"
    },
    "core.FLAG_PERIODS": {
        "body": "core.FLAG_PERIODS",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_PERIODS",
        "scope": "source.lua"
    },
    "core.FLAG_PERIODS_EDIT": {
        "body": "core.FLAG_PERIODS_EDIT",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_PERIODS_EDIT",
        "scope": "source.lua"
    },
    "core.FLAG_PRICE": {
        "body": "core.FLAG_PRICE",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_PRICE",
        "scope": "source.lua"
    },
    "core.FLAG_SOUND": {
        "body": "core.FLAG_SOUND",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_SOUND",
        "scope": "source.lua"
    },
    "core.FLAG_STRATEGY": {
        "body": "core.FLAG_STRATEGY",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_STRATEGY",
        "scope": "source.lua"
    },
    "core.FLAG_TRADE": {
        "body": "core.FLAG_TRADE",
        "description": "The parameter behavior flag.",
        "prefix": "core.FLAG_TRADE",
        "scope": "source.lua"
    },
    "core.H_Center": {
        "body": "core.H_Center",
        "description": "The horizonal alignment of a label.",
        "prefix": "core.H_Center",
        "scope": "source.lua"
    },
    "core.H_Left": {
        "body": "core.H_Left",
        "description": "The horizonal alignment of a label.",
        "prefix": "core.H_Left",
        "scope": "source.lua"
    },
    "core.H_Right": {
        "body": "core.H_Right",
        "description": "The horizonal alignment of a label.",
        "prefix": "core.H_Right",
        "scope": "source.lua"
    },
    "core.host": {
        "body": "core.host",
        "description": "The host application.",
        "prefix": "core.host",
        "scope": "source.lua"
    },
    "core.Indicator": {
        "body": "core.Indicator",
        "description": "The type of the indicator.",
        "prefix": "core.Indicator",
        "scope": "source.lua"
    },
    "core.indicators": {
        "body": "core.indicators",
        "description": "The indicator manager.",
        "prefix": "core.indicators",
        "scope": "source.lua"
    },
    "core.Line": {
        "body": "core.Line",
        "description": "The type of the indicator output.",
        "prefix": "core.Line",
        "scope": "source.lua"
    },
    "core.LINE_DASH": {
        "body": "core.LINE_DASH",
        "description": "The line style (dashed line).",
        "prefix": "core.LINE_DASH",
        "scope": "source.lua"
    },
    "core.LINE_DASHDOT": {
        "body": "core.LINE_DASHDOT",
        "description": "The line style (dash-dotted line).",
        "prefix": "core.LINE_DASHDOT",
        "scope": "source.lua"
    },
    "core.LINE_DOT": {
        "body": "core.LINE_DOT",
        "description": "The line style (dotted line).",
        "prefix": "core.LINE_DOT",
        "scope": "source.lua"
    },
    "core.LINE_NONE": {
        "body": "core.LINE_NONE",
        "description": "The line style (invisible line).",
        "prefix": "core.LINE_NONE",
        "scope": "source.lua"
    },
    "core.LINE_SOLID": {
        "body": "core.LINE_SOLID",
        "description": "The line style (solid line).",
        "prefix": "core.LINE_SOLID",
        "scope": "source.lua"
    },
    "core.Oscillator": {
        "body": "core.Oscillator",
        "description": "The type of the indicator.",
        "prefix": "core.Oscillator",
        "scope": "source.lua"
    },
    "core.OWNER_ADDITIONAL_AREA": {
        "body": "core.OWNER_ADDITIONAL_AREA",
        "description": "The indicator is applied on an additional area.",
        "prefix": "core.OWNER_ADDITIONAL_AREA",
        "scope": "source.lua"
    },
    "core.OWNER_INTERNAL": {
        "body": "core.OWNER_INTERNAL",
        "description": "The indicator is included in another indicator or strategy.",
        "prefix": "core.OWNER_INTERNAL",
        "scope": "source.lua"
    },
    "core.OWNER_MAIN_AREA": {
        "body": "core.OWNER_MAIN_AREA",
        "description": "The indicator is applied on the main chart area.",
        "prefix": "core.OWNER_MAIN_AREA",
        "scope": "source.lua"
    },
    "core.OWNER_UNKNOWN": {
        "body": "core.OWNER_UNKNOWN",
        "description": "The owner is unknown e.g. the command is executed in the Prepare() function while the indicator is not added on a chart yet.",
        "prefix": "core.OWNER_UNKNOWN",
        "scope": "source.lua"
    },
    "core.Signal": {
        "body": "core.Signal",
        "description": "The type of the strategy.",
        "prefix": "core.Signal",
        "scope": "source.lua"
    },
    "core.Strategy": {
        "body": "core.Strategy",
        "description": "The type of the strategy.",
        "prefix": "core.Strategy",
        "scope": "source.lua"
    },
    "core.Tick": {
        "body": "core.Tick",
        "description": "The type of the indicator required source.",
        "prefix": "core.Tick",
        "scope": "source.lua"
    },
    "core.TZ_EST": {
        "body": "core.TZ_EST",
        "description": "Time zone (New York time).",
        "prefix": "core.TZ_EST",
        "scope": "source.lua"
    },
    "core.TZ_FINANCIAL": {
        "body": "core.TZ_FINANCIAL",
        "description": "The financial time time zone.",
        "prefix": "core.TZ_FINANCIAL",
        "scope": "source.lua"
    },
    "core.TZ_GMT": {
        "body": "core.TZ_GMT",
        "description": "Time zone (Universal Coordinated Time).",
        "prefix": "core.TZ_GMT",
        "scope": "source.lua"
    },
    "core.TZ_LOCAL": {
        "body": "core.TZ_LOCAL",
        "description": "The user local time zone.",
        "prefix": "core.TZ_LOCAL",
        "scope": "source.lua"
    },
    "core.TZ_SERVER": {
        "body": "core.TZ_SERVER",
        "description": "The time zone of the server.",
        "prefix": "core.TZ_SERVER",
        "scope": "source.lua"
    },
    "core.TZ_TS": {
        "body": "core.TZ_TS",
        "description": "The time zone chosen to show dates in the host application.",
        "prefix": "core.TZ_TS",
        "scope": "source.lua"
    },
    "core.UpdateAll": {
        "body": "core.UpdateAll",
        "description": "Indicator update mode.",
        "prefix": "core.UpdateAll",
        "scope": "source.lua"
    },
    "core.UpdateLast": {
        "body": "core.UpdateLast",
        "description": "Indicator update mode.",
        "prefix": "core.UpdateLast",
        "scope": "source.lua"
    },
    "core.UpdateNew": {
        "body": "core.UpdateNew",
        "description": "Indicator update mode.",
        "prefix": "core.UpdateNew",
        "scope": "source.lua"
    },
    "core.V_Bottom": {
        "body": "core.V_Bottom",
        "description": "The vertical alignment of a label.",
        "prefix": "core.V_Bottom",
        "scope": "source.lua"
    },
    "core.V_Center": {
        "body": "core.V_Center",
        "description": "The vertical alignment of a label.",
        "prefix": "core.V_Center",
        "scope": "source.lua"
    },
    "core.V_Top": {
        "body": "core.V_Top",
        "description": "The vertical alignment of a label.",
        "prefix": "core.V_Top",
        "scope": "source.lua"
    },
    "core.View": {
        "body": "core.View",
        "description": "The type of the indicator.",
        "prefix": "core.View",
        "scope": "source.lua"
    },
    "creationStrategy": {
        "body": "creationStrategy",
        "description": "The creation strategy for tool.",
        "prefix": "creationStrategy",
        "scope": "source.lua"
    },
    "db": {
        "body": "db",
        "description": "The persistent storage.",
        "prefix": "db",
        "scope": "source.lua"
    },
    "core.DragClick": {
        "body": "core.DragClick",
        "description": "The section describes about DragClick creation pattern.",
        "prefix": "core.DragClick",
        "scope": "source.lua"
    },
    "core.DoubleClick": {
        "body": "core.DoubleClick",
        "description": "The section describes about DoubleClick creation pattern.",
        "prefix": "core.DoubleClick",
        "scope": "source.lua"
    },
    "host.ReferencePoints": {
        "body": "host.ReferencePoints",
        "description": "Return a reference points manager for add/remove points.",
        "prefix": "host.ReferencePoints",
        "scope": "source.lua"
    },
    "host.Window": {
        "body": "host.Window",
        "description": "Return window information table.",
        "prefix": "host.Window",
        "scope": "source.lua"
    },
    "http_loader": {
        "body": "http_loader",
        "description": "Http loader.",
        "prefix": "http_loader",
        "scope": "source.lua"
    },
    "http_lua": {
        "body": "http_lua",
        "description": "Http request manager.",
        "prefix": "http_lua",
        "scope": "source.lua"
    },
    "http_request": {
        "body": "http_request",
        "description": "Http Request.",
        "prefix": "http_request",
        "scope": "source.lua"
    },
    "indicator": {
        "body": "indicator",
        "description": "The profile of the indicator available at the moment of the initialization of your indicator.",
        "prefix": "indicator",
        "scope": "source.lua"
    },
    "indicator.parameters": {
        "body": "indicator.parameters",
        "description": "Returns the instance of the profile parameter set.",
        "prefix": "indicator.parameters",
        "scope": "source.lua"
    },
    "indicore3_ffi": {
        "body": "indicore3_ffi",
        "description": "The ffi functions.",
        "prefix": "indicore3_ffi",
        "scope": "source.lua"
    },
    "instance": {
        "body": "instance",
        "description": "The instance of a nested indicator.",
        "prefix": "instance",
        "scope": "source.lua"
    },
    "instance.ask": {
        "body": "instance.ask",
        "description": "The ask prices of the associated instrument.",
        "prefix": "instance.ask",
        "scope": "source.lua"
    },
    "instance.bid": {
        "body": "instance.bid",
        "description": "The bid prices of the associated instrument.",
        "prefix": "instance.bid",
        "scope": "source.lua"
    },
    "core.date": {
        "body": "core.date(${1:year}, ${2:month}, ${3:day})",
        "description": "Creates date value.",
        "prefix": "core.date(",
        "scope": "source.lua"
    },
    "core.datetime": {
        "body": "core.datetime(${1:year}, ${2:month}, ${3:day}, ${4:hour}, ${5:minute}, ${6:second})",
        "description": "Creates date and time value.",
        "prefix": "core.datetime(",
        "scope": "source.lua"
    },
    "core.dateToTable": {
        "body": "core.dateToTable(${1:date})",
        "description": "Converts the date with a number format into the table.",
        "prefix": "core.dateToTable(",
        "scope": "source.lua"
    },
    "core.drawLine": {
        "body": "core.drawLine(${1:pen}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}${6:[, transparency?]})",
        "description": "Draws a line.",
        "prefix": "core.drawLine(",
        "scope": "source.lua"
    },
    "core.eraseStream": {
        "body": "core.eraseStream(${1:output}, ${2:range})",
        "description": "Sets no data to the specified range of the output stream.",
        "prefix": "core.eraseStream(",
        "scope": "source.lua"
    },
    "core.findDate": {
        "body": "core.findDate(${1:stream}, ${2:date}, ${3:precise})",
        "description": "Searches in the price stream for the specified date.",
        "prefix": "core.findDate(",
        "scope": "source.lua"
    },
    "core.formatDate": {
        "body": "core.formatDate(${1:date})",
        "description": "Formats date/time into a string.",
        "prefix": "core.formatDate(",
        "scope": "source.lua"
    },
    "createCustomIndicator": {
        "body": 
        [
            "local profile = core.indicators:findIndicator(${1:id});",
            "assert(profile ~= nil, \"Please, download and install \" .. ${1:id} .. \".LUA indicator\");",
            "local indicatorParams = profile:parameters();",
            "--set parameters here indicatorParams:setBoolean(\"name\", val);",
            "${4:indi} = core.indicators:create(${1:id}, ${2:source}, ${3:indicatorParams})"
        ],
        "description": "Creates an instance of the custom indicator.",
        "prefix": "createCustomIndicator",
        "scope": "source.lua"
    },
    "indicators:create": {
        "body": "indicators:create(${1:id}, ${2:source}, ${3:parameters...})",
        "description": "Creates an instance of the indicator.",
        "prefix": "indicators:create(",
        "scope": "source.lua"
    },
    "indicators:findIndicator": {
        "body": "indicators:findIndicator(${1:id})",
        "description": "Gets the indicator profile by the identifier.",
        "prefix": "indicators:findIndicator(",
        "scope": "source.lua"
    },
    "core.isnontrading": {
        "body": "core.isnontrading(${1:datetime}, ${2:tradingDayOffset})",
        "description": "Checks whether the specified date and time is the regular non-trading hours.",
        "prefix": "core.isnontrading(",
        "scope": "source.lua"
    },
    "core.makeHttpLoader": {
        "body": "core.makeHttpLoader()",
        "description": "Creates an HTTP reader.",
        "prefix": "core.makeHttpLoader(",
        "scope": "source.lua"
    },
    "core.now": {
        "body": "core.now()",
        "description": "Returns the current local date and time.",
        "prefix": "core.now(",
        "scope": "source.lua"
    },
    "core.parseCsv": {
        "body": "core.parseCsv(${1:string}${2:[, separator?]})",
        "description": "Parses comma-separated values.",
        "prefix": "core.parseCsv(",
        "scope": "source.lua"
    },
    "core.range": {
        "body": "core.range(${1:from}, ${2:to})",
        "description": "Creates the range table for the statistics methods using the 'from' and 'to' indexes.",
        "prefix": "core.range(",
        "scope": "source.lua"
    },
    "core.rangeFrom": {
        "body": "core.rangeFrom(${1:from}, ${2:length})",
        "description": "Creates the range table for the statistics methods using the 'from' index and the size of the range.",
        "prefix": "core.rangeFrom(",
        "scope": "source.lua"
    },
    "core.rangeTo": {
        "body": "core.rangeTo(${1:from}, ${2:length})",
        "description": "Creates the range table for the statistics methods using the 'to' index and the size of the range.",
        "prefix": "core.rangeTo(",
        "scope": "source.lua"
    },
    "core.requires": {
        "body": "core.requires(${1:major}, ${2:minor}${3[, exact?]})",
        "description": "Checks whether the version of indicator core is correct.",
        "prefix": "core.requires(",
        "scope": "source.lua"
    },
    "core.rgb": {
        "body": "core.rgb(${1:red}, ${2:green}, ${3:blue})",
        "description": "Creates the color from the red, green, and blue components.",
        "prefix": "core.rgb(",
        "scope": "source.lua"
    },
    "core.tableToDate": {
        "body": "core.tableToDate(${1:date})",
        "description": "Converts the table into the date with a number format.",
        "prefix": "core.tableToDate(",
        "scope": "source.lua"
    },
    "core.touches": {
        "body": "core.touches(${1:stream1}, ${2:stream2}, ${3:period1}${4:[, period2?]})",
        "description": "Checks whether one stream touches the other stream at the specified position.",
        "prefix": "core.touches(",
        "scope": "source.lua"
    },
    "core.valuemap": {
        "body": "core.valuemap()",
        "description": "Creates a value map.",
        "prefix": "core.valuemap(",
        "scope": "source.lua"
    },
    "core.version": {
        "body": "core.version()",
        "description": "Returns the version of indicator core.",
        "prefix": "core.version(",
        "scope": "source.lua"
    },
    "core:app_path": {
        "body": "core:app_path()",
        "description": "Gets the path to lua5.1.dll",
        "prefix": "core:app_path(",
        "scope": "source.lua"
    },
    "creationStrategy:setMaxClickCount": {
        "body": "creationStrategy:setMaxClickCount(${1:count})",
        "description": "Sets max click count for the process of creating a tool.",
        "prefix": "creationStrategy:setMaxClickCount(",
        "scope": "source.lua"
    },
    "creationStrategy:setNeedParamsAfterPattern": {
        "body": "creationStrategy:setNeedParamsAfterPattern(${1:needParams})",
        "description": "Sets request for dialog on setting parameters after finishing creation pattern.",
        "prefix": "creationStrategy:setNeedParamsAfterPattern(",
        "scope": "source.lua"
    },
    "creationStrategy:setPattern": {
        "body": "creationStrategy:setPattern(${1:type})",
        "description": "Sets the type of the creation pattern.",
        "prefix": "creationStrategy:setPattern(",
        "scope": "source.lua"
    },
    "db:get": {
        "body": "db:get(${1:name}${2:[, default?]})",
        "description": "Gets the value from the persistent storage.",
        "prefix": "db:get(",
        "scope": "source.lua"
    },
    "db:put": {
        "body": "db:put(${1:name}, ${2:value})",
        "description": "Saves the value to the persistent storage.",
        "prefix": "db:put(",
        "scope": "source.lua"
    },
    "core.ILanguageServiceIndicator": {
        "body": "core.ILanguageServiceIndicator",
        "description": "The type of the profile (Indicator).",
        "prefix": "core.ILanguageServiceIndicator",
        "scope": "source.lua"
    },
    "core.ILanguageServiceJs": {
        "body": "core.ILanguageServiceJs",
        "description": "The language of the profile (JavaScript).",
        "prefix": "core.ILanguageServiceJs",
        "scope": "source.lua"
    },
    "core.ILanguageServiceLua": {
        "body": "core.ILanguageServiceLua",
        "description": "The language of the profile (Lua).",
        "prefix": "core.ILanguageServiceLua",
        "scope": "source.lua"
    },
    "core.ILanguageServiceNativeWin": {
        "body": "core.ILanguageServiceNativeWin",
        "description": "The language of the profile (C++ for Windows).",
        "prefix": "core.ILanguageServiceNativeWin",
        "scope": "source.lua"
    },
    "core.ILanguageServiceStrategy": {
        "body": "core.ILanguageServiceStrategy",
        "description": "The type of the profile (Strategy).",
        "prefix": "core.ILanguageServiceStrategy",
        "scope": "source.lua"
    },
    "core.ILanguageServiceUnknownLanguage": {
        "body": "core.ILanguageServiceUnknownLanguage",
        "description": "The language of the profile (Undefined).",
        "prefix": "core.ILanguageServiceUnknownLanguage",
        "scope": "source.lua"
    },
    "core.ILanguageServiceUnknownType": {
        "body": "core.ILanguageServiceUnknownType",
        "description": "The type of the profile (Undefined).",
        "prefix": "core.ILanguageServiceUnknownType",
        "scope": "source.lua"
    },
    "functionDraw": {
        "body": 
        [
            "local init = false;",
            "function Draw(stage, context)",
            "    if stage ~= 2 then",
            "        return;",
            "    end",
            "    if not init then",
            "        init = true;",
            "    end",
            "end"
        ],
        "description": "The function is called every time when the chart that contains the tool is being repainted.",
        "prefix": "functionDraw",
        "scope": "source.lua"
    },
    "Update": {
        "body": "function Update(${1:period}, ${2:mode})",
        "description": "The indicator calculation.",
        "prefix": "function Update(",
        "scope": "source.lua"
    },
    "reference_points": {
        "body": "reference_points",
        "description": "The reference points manager.",
        "prefix": "reference_points",
        "scope": "source.lua"
    },
    ":removeReferencePoint": {
        "body": ":removeReferencePoint(${1:id})",
        "description": "Remove reference point.",
        "prefix": ":removeReferencePoint(",
        "scope": "source.lua"
    },
    ":setReferencePoint": {
        "body": ":setReferencePoint(${1:id}, ${2:x}, ${3:y}, ${4:flags}, ${5:color}, ${6:thickness})",
        "description": "Sets reference point.",
        "prefix": ":setReferencePoint(",
        "scope": "source.lua"
    },
    "resources": {
        "body": "resources",
        "description": "The content of the resource file.",
        "prefix": "resources",
        "scope": "source.lua"
    },
    "resources:get": {
        "body": "resources:get(${1:id})",
        "description": "Gets the resource string.",
        "prefix": "resources:get(",
        "scope": "source.lua"
    },
    "storagedb": {
        "body": "storagedb",
        "description": "The persistent storage manager.",
        "prefix": "storagedb",
        "scope": "source.lua"
    },
    "storagedb.get_db": {
        "body": "storagedb.get_db(${1:name})",
        "description": "Opens or creates the persistent storage.",
        "prefix": "storagedb.get_db(",
        "scope": "source.lua"
    },
    "strategy": {
        "body": "strategy",
        "description": "The profile of the strategy available at the moment of its initialization.",
        "prefix": "strategy",
        "scope": "source.lua"
    },
    "strategy.parameters": {
        "body": "strategy.parameters",
        "description": "Returns the instance of the profile parameter set.",
        "prefix": "strategy.parameters",
        "scope": "source.lua"
    },
    "strategy:description": {
        "body": "strategy:description(${1:description})",
        "description": "Sets the description.",
        "prefix": "strategy:description(",
        "scope": "source.lua"
    },
    "strategy:name": {
        "body": "strategy:name(${1:name})",
        "description": "Sets the name.",
        "prefix": "strategy:name(",
        "scope": "source.lua"
    },
    "strategy:setTag": {
        "body": "strategy:setTag(${1:name}, ${2:value})",
        "description": "Sets the tag value.",
        "prefix": "strategy:setTag(",
        "scope": "source.lua"
    },
    "strategy:type": {
        "body": "strategy:type(${1:type})",
        "description": "Sets the type of the strategy.",
        "prefix": "strategy:type(",
        "scope": "source.lua"
    },
    "valuemap": {
        "body": "valuemap",
        "description": "The value map.",
        "prefix": "valuemap",
        "scope": "source.lua"
    },
    "valuemap:append": {
        "body": "valuemap:append({$1:valuemap})",
        "description": "Adds the value map to the list of children valuemaps.",
        "prefix": "valuemap:append(",
        "scope": "source.lua"
    },
    "window": {
        "body": "window",
        "description": "The window information.",
        "prefix": "window",
        "scope": "source.lua"
    },
    "window.CurrentPane": {
        "body": "window.CurrentPane",
        "description": "Gets current pane.",
        "prefix": "window.CurrentPane",
        "scope": "source.lua"
    },
    "expat_lua": {
        "body": "expat_lua",
        "description": "",
        "prefix": "expat_lua",
        "scope": "source.lua"
    },
    "expat_lua.ATTRIBUTE": {
        "body": "expat_lua.ATTRIBUTE",
        "description": "The node type: attribute.",
        "prefix": "expat_lua.ATTRIBUTE",
        "scope": "source.lua"
    },
    "expat_lua.COMMENT": {
        "body": "expat_lua.COMMENT",
        "description": "The node type: comment.",
        "prefix": "expat_lua.COMMENT",
        "scope": "source.lua"
    },
    "expat_lua.ELEMENT": {
        "body": "expat_lua.ELEMENT",
        "description": "The node type: element.",
        "prefix": "expat_lua.ELEMENT",
        "scope": "source.lua"
    },
    "expat_lua.TEXT": {
        "body": "expat_lua.TEXT",
        "description": "The node type: text.",
        "prefix": "expat_lua.TEXT",
        "scope": "source.lua"
    },
    "expat_lua.parseDOM": {
        "body": "expat_lua.parseDOM(${1:xml})",
        "description": "Parses XML and builds DOM.",
        "prefix": "expat_lua.parseDOM(",
        "scope": "source.lua"
    },
    "expat_lua.parseSAX": {
        "body": "expat_lua.parseSAX(${1:xml}, ${2:handler})",
        "description": "Parses XML using SAX listener.",
        "prefix": "expat_lua.parseSAX(",
        "scope": "source.lua"
    },
    "expat_lua.utf8_to_ansi": {
        "body": "expat_lua.utf8_to_ansi(${1:utf8})",
        "description": "Converts UTF-8 string into the system default encoding.",
        "prefix": "expat_lua.utf8_to_ansi(",
        "scope": "source.lua"
    },
    "ExtAsyncOperationFinished": {
        "body": "function ExtAsyncOperationFinished(${1:cookie}, ${2:success}, ${3:message}, ${4:message1}, ${5:message2})",
        "description": "The function must be implemented in case helper.lua is used.",
        "prefix": "function ExtAsyncOperationFinished(",
        "scope": "source.lua"
    },
    "ExtSubscribe": {
        "body": "function ExtSubscribe(${1:id}, ${2:instrument}, ${3:period}, ${4:bid}, ${5:kind})",
        "description": "The function is designed to subscribe for bar histories in the strategies.",
        "prefix": "function ExtSubscribe(",
        "scope": "source.lua"
    },
    "ExtSubscribe1": {
        "body": "function ExtSubscribe1(${1:id}, ${2:instrument}, ${3:period}, ${4:count}, ${5:bid}, ${6:kind})",
        "description": "The function is designed to subscribe for bar histories in the strategies.",
        "prefix": "function ExtSubscribe1(",
        "scope": "source.lua"
    },
    "ExtUpdate": {
        "body": "function ExtUpdate(${1:id}, ${2:source}, ${3:period})",
        "description": "The function must be implemented in case helper.lua is used.",
        "prefix": "function ExtUpdate(",
        "scope": "source.lua"
    },
    "host:execute(\"calculatePositionOfDate\", ...)": {
        "body": "host:execute(\"calculatePositionOfDate\", ${1:stream}, ${2:date})",
        "description": "Searches for the specified date in the price stream.",
        "prefix": "host:execute(\"calculatePositionOfDate\",",
        "scope": "source.lua"
    },
    "host:execute(\"convertTime\", ...)": {
        "body": "host:execute(\"convertTime\", ${1:tzFrom}, ${2:tzTo}, ${3:date})",
        "description": "Converts the date and time between timezones.",
        "prefix": "host:execute(\"convertTime\",",
        "scope": "source.lua"
    },
    "host:execute(\"createFont\", ...)": {
        "body": "host:execute(\"createFont\", ${1:facename}, ${2:size}, ${3:italic}, ${4:bold})",
        "description": "Create a font for further usage for labels.",
        "prefix": "host:execute(\"createFont\",",
        "scope": "source.lua"
    },
    "host:execute(\"deleteFont\", ...)": {
        "body": "host:execute(\"deleteFont\", ${1:font})",
        "description": "Deletes a font.",
        "prefix": "host:execute(\"deleteFont\",",
        "scope": "source.lua"
    },
    "host:execute(\"drawLabel\", ...)": {
        "body": "host:execute(\"drawLabel\", ${1:id}, ${2:date}, ${3:level}, ${4:text})",
        "description": "Creates or replaces a label.",
        "prefix": "host:execute(\"drawLabel\",",
        "scope": "source.lua"
    },
    "host:execute(\"drawLabel1\", ...)": {
        "body": "host:execute(\"drawLabel1\", ${1:id}, ${2:x}, ${3:xType}, ${4:y}, ${5:yType}, ${6:halign}, ${7:valign}, ${8:font}, ${9:color}, ${10:text})",
        "description": "Creates or replaces a label (advanced version).",
        "prefix": "host:execute(\"drawLabel1\",",
        "scope": "source.lua"
    },
    "host:execute(\"drawLine\", ...)": {
        "body": "host:execute(\"drawLine\", ${1:id}, ${2:fromDate}, ${3:fromLevel}, ${4:toDate}, ${5:toLevel}, ${6:color}${7:[, style?${8:[, width?${9:[, tooltip?]}]}]})",
        "description": "Creates or replaces a label (advanced version).",
        "prefix": "host:execute(\"drawLine\",",
        "scope": "source.lua"
    },
    "host:execute(\"extendHistory\", ...)": {
        "body": "host:execute(\"extendHistory\", ${1:cookie}, ${2:stream}, ${3:from}, ${4:to})",
        "description": "Deprecated. Extends the previously loaded history in the specified date range.",
        "prefix": "host:execute(\"extendHistory\",",
        "scope": "source.lua"
    },
    "host:execute(\"getAskPrice\", ...)": {
        "body": "host:execute(\"getAskPrice\")",
        "description": "Returns the collection of the ask prices.",
        "prefix": "host:execute(\"getAskPrice\",",
        "scope": "source.lua"
    },
    "host:execute(\"getBidPrice\", ...)": {
        "body": "host:execute(\"getBidPrice\")",
        "description": "Returns the collection of the bid prices.",
        "prefix": "host:execute(\"getBidPrice\",",
        "scope": "source.lua"
    },
    "host:execute(\"getHistory\", ...)": {
        "body": "host:execute(\"getHistory\", ${1:cookie}, ${2:instrument}, ${3:barSize}, ${4:from}, ${5:to}, ${6:bidOrAsk})",
        "description": "Loads the history of the specified instrument.",
        "prefix": "host:execute(\"getHistory\",",
        "scope": "source.lua"
    },
    "host:execute(\"getHistory1\", ...)": {
        "body": "host:execute(\"getHistory1\", ${1:cookie}, ${2:instrument}, ${3:barSize}, ${4:count}, ${5:to}, ${6:bidOrAsk})",
        "description": "Loads the history of the specified instrument.",
        "prefix": "host:execute(\"getHistory1\",",
        "scope": "source.lua"
    },
    "host:execute(\"getIndicatorOwner\", ...)": {
        "body": "host:execute(\"getIndicatorOwner\")",
        "description": "Gets the owner of the indicator.",
        "prefix": "host:execute(\"getIndicatorOwner\",",
        "scope": "source.lua"
    },
    "host:execute(\"getProperty\", ...)": {
        "body": "host:execute(\"getProperty\", ${1:name})",
        "description": "Gets the user-define property.",
        "prefix": "host:execute(\"getProperty\",",
        "scope": "source.lua"
    },
    "getSyncHistory": {
        "body": "core.host:execute(\"getSyncHistory\", ${1:instrument}, ${2:barSize}, ${3:bidOrAsk}, ${4:barsAtLeft}, ${5:commandIdSyncComplete}, ${6:commandIdSyncStarted})",
        "description": "Loads the history of the specified instrument and keeps it synchronized with an indicator source.",
        "prefix": "getSyncHistory",
        "scope": "source.lua"
    },
    "host:execute(\"getTradingDayOffset\", ...)": {
        "body": "host:execute(\"getTradingDayOffset\")",
        "description": "Returns an offset of the trading day start.",
        "prefix": "host:execute(\"getTradingDayOffset\",",
        "scope": "source.lua"
    },
    "host:execute(\"getTradingProperty\", ...)": {
        "body": "host:execute(\"getTradingProperty\", ${1:name}, ${2:instrument}, ${3:account})",
        "description": "Returns a trading property.",
        "prefix": "host:execute(\"getTradingProperty\",",
        "scope": "source.lua"
    },
    "host:execute(\"prompt\", ...)": {
        "body": "host:execute(\"prompt\", ${1:cookie}, ${2:title}, ${3:label}, ${4:parameters})",
        "description": "Shows a prompt box.",
        "prefix": "host:execute(\"prompt\",",
        "scope": "source.lua"
    },
    "host:execute(\"removeLabel\", ...)": {
        "body": "host:execute(\"removeLabel\", ${1:id})",
        "description": "Removes a previously created label.",
        "prefix": "host:execute(\"removeLabel\",",
        "scope": "source.lua"
    },
    "host:execute(\"removeLine\", ...)": {
        "body": "host:execute(\"removeLine\", ${1:id})",
        "description": "Removes a previously created line.",
        "prefix": "host:execute(\"removeLine\",",
        "scope": "source.lua"
    },
    "host:execute(\"setStatus\", ...)": {
        "body": "host:execute(\"setStatus\", ${1:text})",
        "description": "Displays additional information at right of indicators' label.",
        "prefix": "host:execute(\"setStatus\",",
        "scope": "source.lua"
    },
    "host:execute(\"setTimer\", ...)": {
        "body": "host:execute(\"setTimer\", ${1:cookie}, ${2:timeout})",
        "description": "Sets the timer.",
        "prefix": "host:execute(\"setTimer\",",
        "scope": "source.lua"
    },
    "host:execute(\"subscribeTradeEvents\", ...)": {
        "body": "host:execute(\"subscribeTradeEvents\", ${1:cookie}, ${2:table})",
        "description": "Subscribes a strategy or an indicator for trading events.",
        "prefix": "host:execute(\"subscribeTradeEvents\",",
        "scope": "source.lua"
    },
    "host:findTable": {
        "body": "host:findTable(${1:tableId})",
        "description": "Finds the trading table.",
        "prefix": "host:findTable(",
        "scope": "source.lua"
    },
    "host:version": {
        "body": "host:version()",
        "description": "Returns the application name and the version.",
        "prefix": "host:version(",
        "scope": "source.lua"
    },
    "http_loader.cancel": {
        "body": "http_loader.cancel()",
        "description": "Cancels currently executing load operation.",
        "prefix": "http_loader.cancel(",
        "scope": "source.lua"
    },
    "http_loader.load": {
        "body": "http_loader.load(${1:host}, ${2:port}, ${3:object}, ${4:async})",
        "description": "Loads an object using http interface",
        "prefix": "http_loader.load(",
        "scope": "source.lua"
    },
    "http_loader.loading": {
        "body": "http_loader.loading()",
        "description": "Checks whether the last load asynchronous operation is being executed.",
        "prefix": "http_loader.loading(",
        "scope": "source.lua"
    },
    "http_loader.response": {
        "body": "http_loader.response()",
        "description": "Returns the loaded object as a string.",
        "prefix": "http_loader.response(",
        "scope": "source.lua"
    },
    "http_loader.successful": {
        "body": "http_loader.successful()",
        "description": "Checks whether the load operation has been successfully finished.",
        "prefix": "http_loader.successful(",
        "scope": "source.lua"
    },
    "http_lua.createRequest": {
        "body": "http_lua.createRequest()",
        "description": "Creates a new request.",
        "prefix": "http_lua.createRequest(",
        "scope": "source.lua"
    },
    "http_lua.fromBase64": {
        "body": "http_lua.fromBase64(${1:value})",
        "description": "Parses Base64 encoded value and returns the string (possible the binary string).",
        "prefix": "http_lua.fromBase64(",
        "scope": "source.lua"
    },
    "http_lua.md2": {
        "body": "http_lua.md2(${1:value})",
        "description": "Calculates MD2 hash value for the string specified.",
        "prefix": "http_lua.md2(",
        "scope": "source.lua"
    },
    "http_lua.toBase64": {
        "body": "http_lua.toBase64(${1:value})",
        "description": "Converts a string into its base64 encoded value.",
        "prefix": "http_lua.toBase64(",
        "scope": "source.lua"
    },
    "http_lua.toHex": {
        "body": "http_lua.toHex(${1:value})",
        "description": "Converts a string into its hexadecimal presentation.",
        "prefix": "http_lua.toHex(",
        "scope": "source.lua"
    },
    "http_request:cancel": {
        "body": "http_request:cancel()",
        "description": "Cancels the currently executed request.",
        "prefix": "http_request:cancel(",
        "scope": "source.lua"
    },
    "http_request:httpStatus": {
        "body": "http_request:httpStatus()",
        "description": "Gets the status of the request execution.",
        "prefix": "http_request:httpStatus(",
        "scope": "source.lua"
    },
    "http_request:loading": {
        "body": "http_request:loading()",
        "description": "Checks whether the request is still being executed.",
        "prefix": "http_request:loading(",
        "scope": "source.lua"
    },
    "http_request:response": {
        "body": "http_request:response()",
        "description": "Gets the body of the response.",
        "prefix": "http_request:response(",
        "scope": "source.lua"
    },
    "http_request:responseHeader": {
        "body": "http_request:responseHeader(${1:name}${2:[, index?]})",
        "description": "Gets the response header value by the name.",
        "prefix": "http_request:responseHeader(",
        "scope": "source.lua"
    },
    "http_request:responseHeaders": {
        "body": "http_request:responseHeaders()",
        "description": "Gets all response headers.",
        "prefix": "http_request:responseHeaders(",
        "scope": "source.lua"
    },
    "http_request:setAgent": {
        "body": "http_request:setAgent(${1:agentName})",
        "description": "Set the name of the user agent.",
        "prefix": "http_request:setAgent(",
        "scope": "source.lua"
    },
    "http_request:setRequestHeader": {
        "body": "http_request:setRequestHeader(${1:name}, ${2:value})",
        "description": "Set the request header value.",
        "prefix": "http_request:setRequestHeader(",
        "scope": "source.lua"
    },
    "http_request:start": {
        "body": "http_request:start(${1:url}${2:[, method?${3:[, data?]}]})",
        "description": "Starts the data loading.",
        "prefix": "http_request:start(",
        "scope": "source.lua"
    },
    "http_request:success": {
        "body": "http_request:success()",
        "description": "Checks whether the load operation has been successfully finished.",
        "prefix": "http_request:success(",
        "scope": "source.lua"
    },
    "indicator:description": {
        "body": "indicator:description(${1:description})",
        "description": "Sets the description of the indicator.",
        "prefix": "indicator:description(",
        "scope": "source.lua"
    },
    "indicator:name": {
        "body": "indicator:name(${1:name})",
        "description": "Sets the name of the indicator.",
        "prefix": "indicator:name(",
        "scope": "source.lua"
    },
    "indicator:path": {
        "body": "indicator:path()",
        "description": "Gets the folder where the indicator file is located.",
        "prefix": "indicator:path(",
        "scope": "source.lua"
    },
    "indicator:requiredSource": {
        "body": "indicator:requiredSource(${1:type})",
        "description": "Sets the type of the required source of the indicator.",
        "prefix": "indicator:requiredSource(",
        "scope": "source.lua"
    },
    "indicator:setTag": {
        "body": "indicator:setTag(${1:name}, ${2:value})",
        "description": "Sets the tag value.",
        "prefix": "indicator:setTag(",
        "scope": "source.lua"
    },
    "indicator:type": {
        "body": "indicator:type(${1:type})",
        "description": "Sets the type of the indicator.",
        "prefix": "indicator:type(",
        "scope": "source.lua"
    },
    "indicore3_ffi.barstream_getClose": {
        "body": "indicore3_ffi.barstream_getClose(${1:stream}, ${2:index})",
        "description": "The function returns the Close value of the specified period. The function is applicable only to a bar stream.",
        "prefix": "indicore3_ffi.barstream_getClose(",
        "scope": "source.lua"
    },
    "indicore3_ffi.barstream_getHigh": {
        "body": "indicore3_ffi.barstream_getHigh(${1:stream}, ${2:index})",
        "description": "The function returns the High value of the specified period. The function is applicable only to a bar stream.",
        "prefix": "indicore3_ffi.barstream_getHigh(",
        "scope": "source.lua"
    },
    "indicore3_ffi.barstream_getLow": {
        "body": "indicore3_ffi.barstream_getLow(${1:stream}, ${2:index})",
        "description": "The function returns the Low value of the specified period. The function is applicable only to a bar stream.",
        "prefix": "indicore3_ffi.barstream_getLow(",
        "scope": "source.lua"
    },
    "indicore3_ffi.barstream_getOpen": {
        "body": "indicore3_ffi.barstream_getOpen(${1:stream}, ${2:index})",
        "description": "The function returns the Open value of the specified period. The function is applicable only to a bar stream.",
        "prefix": "indicore3_ffi.barstream_getOpen(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_crosses": {
        "body": "indicore3_ffi.core_crosses(${1:stream1}, ${2:stream2}, ${3:period1}, ${4:period2})",
        "description": "The function check whether the stream crosses the other stream in any direction at the specified period.",
        "prefix": "indicore3_ffi.core_crosses(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_crosses2": {
        "body": "indicore3_ffi.core_crosses2(${1:stream1}, ${2:level}, ${3:period1})",
        "description": "The function check whether the stream crosses the specified level in any direction at the specified period.",
        "prefix": "indicore3_ffi.core_crosses2(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_crossesOver": {
        "body": "indicore3_ffi.core_crossesOver(${1:stream1}, ${2:stream2}, ${3:period1}, ${4:period2})",
        "description": "The function checks whether one stream crosses over the other stream at the specified period.",
        "prefix": "indicore3_ffi.core_crossesOver(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_crossesOver2": {
        "body": "indicore3_ffi.core_crossesOver2(${1:stream1}, ${2:level}, ${3:period1})",
        "description": "The function checks whether one stream crosses over the specified level at the specified period.",
        "prefix": "indicore3_ffi.core_crossesOver2(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_crossesOverOrTouch": {
        "body": "indicore3_ffi.core_crossesOverOrTouch(${1:stream1}, ${2:stream2}, ${3:period1}, ${4:period2})",
        "description": "The function checks whether the stream crosses over or touches the other stream at the specified position.",
        "prefix": "indicore3_ffi.core_crossesOverOrTouch(",
        "scope": "source.lua"
    },
    "Init": {
        "body": "function Init()",
        "description": "The indicator profile initialization.",
        "prefix": "function Init(",
        "scope": "source.lua"
    },
    "instance.DATA": {
        "body": "instance.DATA",
        "description": "The property returns the output stream of the indicator. If the indicator produces more output streams than one, the property returns the first output stream.",
        "prefix": "instance.DATA",
        "scope": "source.lua"
    },
    "instance.parameters": {
        "body": "instance.parameters",
        "description": "The parameters of the strategy or signal instance.",
        "prefix": "instance.parameters",
        "scope": "source.lua"
    },
    "instance:getCandleOutput": {
        "body": "instance:getCandleOutput(${1:index})",
        "description": "The method returns the output candle group of the indicator as a bar stream by the group identifier.",
        "prefix": "instance:getCandleOutput(",
        "scope": "source.lua"
    },
    "instance:getCandleOutputsCount": {
        "body": "instance:getCandleOutputsCount()",
        "description": "The method returns the number of output candle groups of the indicator.",
        "prefix": "instance:getCandleOutputsCount(",
        "scope": "source.lua"
    },
    "instance:getStream": {
        "body": "instance:getStream(${1:index})",
        "description": "The method returns the output stream of the indicator by the stream index.",
        "prefix": "instance:getStream(",
        "scope": "source.lua"
    },
    "instance:getStreamCount": {
        "body": "instance:getStreamCount()",
        "description": "The method returns the number of output streams of the indicator.",
        "prefix": "instance:getStreamCount(",
        "scope": "source.lua"
    },
    "instance:getTextOutput": {
        "body": "instance:getTextOutput(${1:index})",
        "description": "The method returns the text output stream of the indicator by the stream index.",
        "prefix": "instance:getTextOutput(",
        "scope": "source.lua"
    },
    "instance:getTextOutputCount": {
        "body": "instance:getTextOutputCount()",
        "description": "The method returns the number of text output streams of the indicator.",
        "prefix": "instance:getTextOutputCount(",
        "scope": "source.lua"
    },
    "instance:name": {
        "body": "instance:name()",
        "description": "The method returns the name of the indicator instance.",
        "prefix": "instance:name(",
        "scope": "source.lua"
    },
    "instance:update": {
        "body": "instance:update(${1:flag})",
        "description": "The method forces the calculation of the nested indicator.",
        "prefix": "instance:update(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_crossesOverOrTouch2": {
        "body": "indicore3_ffi.core_crossesOverOrTouch2(${1:stream1}, ${2:level}, ${3:period1})",
        "description": "The function checks whether the stream crosses over or touches the specified level at the specified position.",
        "prefix": "indicore3_ffi.core_crossesOverOrTouch2(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_crossesUnder": {
        "body": "indicore3_ffi.core_crossesUnder(${1:stream1}, ${2:stream2}, ${3:period1}, ${4:period2})",
        "description": "The function checks whether the stream crosses under the other stream at the specified period.",
        "prefix": "indicore3_ffi.core_crossesUnder(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_crossesUnder2": {
        "body": "indicore3_ffi.core_crossesUnder2(${1:stream1}, ${2:level}, ${3:period1})",
        "description": "The function checks whether the stream crosses under the specified level at the specified period.",
        "prefix": "indicore3_ffi.core_crossesUnder2(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_crossesUnderOrTouch": {
        "body": "indicore3_ffi.core_crossesUnderOrTouch(${1:stream1}, ${2:stream2}, ${3:period1}, ${4:period2})",
        "description": "The function checks whether the stream crosses under or touches the other stream at the specified period.",
        "prefix": "indicore3_ffi.core_crossesUnderOrTouch(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_crossesUnderOrTouch2": {
        "body": "indicore3_ffi.core_crossesUnderOrTouch2(${1:stream1}, ${2:level}, ${3:period1})",
        "description": "The function checks whether the stream crosses under or touches the specified level at the specified period.",
        "prefix": "indicore3_ffi.core_crossesUnderOrTouch2(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_drawLine": {
        "body": "indicore3_ffi.core_drawLine(${1:stream}, ${2:from}, ${3:to}, ${4:value1}, ${5:pos1}, ${6:value2}, ${7:pos2}, ${8:color})",
        "description": "The function draws the line in the output stream.",
        "prefix": "indicore3_ffi.core_drawLine(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_erase": {
        "body": "indicore3_ffi.core_erase(${1:stream}, ${2:from}, ${3:to})",
        "description": "The function sets no data to the specified range of periods in the output stream.",
        "prefix": "indicore3_ffi.core_erase(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_findDate": {
        "body": "indicore3_ffi.core_findDate(${1:stream}, ${2:date}, ${3:precise})",
        "description": "The function searches the specified stream for the specified date. The function returns the index of the period to which the specified date belongs.",
        "prefix": "indicore3_ffi.core_findDate(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_getCandle": {
        "body": "indicore3_ffi.core_getCandle(${1:parsedCandle}, ${2:date}, ${3:dayOffset}, ${4:weekOffset}, ${5:pend})",
        "description": "The function returns the start date of the period to which the specified date belongs.",
        "prefix": "indicore3_ffi.core_getCandle(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_isNonTrading": {
        "body": "indicore3_ffi.core_isNonTrading(${1:date}, ${2:dayOffset})",
        "description": "The function checks whether the specified date and time belongs to the regular non-trading hours (weekend).",
        "prefix": "indicore3_ffi.core_isNonTrading(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_avg": {
        "body": "indicore3_ffi.core_math_avg(${1:source}, ${2:from}, ${3:to})",
        "description": "The function calculates the average value of the specified range of the stream values.",
        "prefix": "indicore3_ffi.core_math_avg(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_cfft": {
        "body": "indicore3_ffi.core_math_cfft(${1:array}, ${2:tn}, ${3:inverse})",
        "description": "The function performs the fast complex fourier transform.",
        "prefix": "indicore3_ffi.core_math_cfft(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_correlation": {
        "body": "indicore3_ffi.core_math_correlation(${1:source1}, ${2:from1}, ${3:to1}, ${4:source2}, ${5:from2}, ${6:to2})",
        "description": "The function calculates the correlation coefficient between two streams in the specified ranges.",
        "prefix": "indicore3_ffi.core_math_correlation(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_covariance": {
        "body": "indicore3_ffi.core_math_covariance(${1:source1}, ${2:from1}, ${3:to1}, ${4:source2}, ${5:from2}, ${6:to2})",
        "description": "The function calculates the covariance between two streams in the specified ranges.",
        "prefix": "indicore3_ffi.core_math_covariance(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_devsq": {
        "body": "indicore3_ffi.core_math_devsq(${1:source}, ${2:from}, ${3:to})",
        "description": "The function calculates the sum of squares of deviations of data points from their sample mean of the specified range of the stream values.",
        "prefix": "indicore3_ffi.core_math_devsq(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_fft": {
        "body": "indicore3_ffi.core_math_fft(${1:array}, ${2:tn}, ${3:inverse})",
        "description": "The function performs the fast real fourier transform.",
        "prefix": "indicore3_ffi.core_math_fft(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_kurt": {
        "body": "indicore3_ffi.core_math_kurt(${1:source}, ${2:from}, ${3:to})",
        "description": "The function calculates the kurtosis of a distribution of the specified range of the stream values.",
        "prefix": "indicore3_ffi.core_math_kurt(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_lreg": {
        "body": "indicore3_ffi.core_math_lreg(${1:source}, ${2:from}, ${3:to})",
        "description": "The function calculates the linear regression value of the specified range of the stream values.",
        "prefix": "indicore3_ffi.core_math_lreg(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_lwma": {
        "body": "indicore3_ffi.core_math_lwma(${1:source}, ${2:from}, ${3:to})",
        "description": "The function calculates the linear-weighted average value of the range of the stream values.",
        "prefix": "indicore3_ffi.core_math_lwma(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_meandev": {
        "body": "indicore3_ffi.core_math_meandev(${1:source}, ${2:from}, ${3:to})",
        "description": "The function calculates the mean deviation of the specified range of the stream values.",
        "prefix": "indicore3_ffi.core_math_meandev(",
        "scope": "source.lua"
    },
    ":color": {
        "body": ":color(${1:index})",
        "description": "The method returns the color of the stream graphical representation on the chart (line, bar, dot).",
        "prefix": ":color(",
        "scope": "source.lua"
    },
    ":id": {
        "body": ":id()",
        "description": "The method returns the identifier of the output stream.",
        "prefix": ":id(",
        "scope": "source.lua"
    },
    ":isBreak": {
        "body": ":isBreak(${1:index})",
        "description": "The method checks whether the specified period of the output stream is drawn on the chart (a break is set).",
        "prefix": ":isBreak(",
        "scope": "source.lua"
    },
    ":isVisible": {
        "body": ":isVisible()",
        "description": "The method checks whether the output stream is drawn on the chart.",
        "prefix": ":isVisible(",
        "scope": "source.lua"
    },
    ":label": {
        "body": ":label()",
        "description": "The method returns the short name of the output stream.",
        "prefix": ":label(",
        "scope": "source.lua"
    },
    ":level": {
        "body": ":level(${1:index})",
        "description": "The method returns the parameters of the level (horizontal line) that supplements the stream on the chart.",
        "prefix": ":level(",
        "scope": "source.lua"
    },
    ":levelsCount": {
        "body": ":levelsCount(${1:index})",
        "description": "The method returns the number of levels (horizontal lines) that supplement the stream on the chart.",
        "prefix": ":levelsCount(",
        "scope": "source.lua"
    },
    ":lineStyle": {
        "body": ":lineStyle()",
        "description": "The method returns the style of the line that represents the stream on the chart.",
        "prefix": ":lineStyle(",
        "scope": "source.lua"
    },
    ":lineWidth": {
        "body": ":lineWidth()",
        "description": "The method returns the width of the stream graphical representation on the chart (line, bar, dot).",
        "prefix": ":lineWidth(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_median_s": {
        "body": "indicore3_ffi.core_math_median_s(${1:source}, ${2:from}, ${3:to})",
        "description": "The function calculates the median value of the specified range of the stream values.",
        "prefix": "indicore3_ffi.core_math_median_s(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_median_w": {
        "body": "indicore3_ffi.core_math_median_w(${1:source}, ${2:from}, ${3:to})",
        "description": "The function calculates the median value of the specified range of the stream values by using the the Wirth's Kth-minimum function.",
        "prefix": "indicore3_ffi.core_math_median_w(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_regChannel": {
        "body": "indicore3_ffi.core_math_regChannel(${1:source}, ${2:from}, ${3:to}, ${4:a}, ${5:b}, ${6:dist}, ${7:raff})",
        "description": "The function calculates the parameters of the regression channel.",
        "prefix": "indicore3_ffi.core_math_regChannel(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_skew": {
        "body": "indicore3_ffi.core_math_skew(${1:source}, ${2:from}, ${3:to})",
        "description": "The function calculates the skewness of a distribution of the specified range of the stream values.",
        "prefix": "indicore3_ffi.core_math_skew(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_slope_lreg": {
        "body": "indicore3_ffi.core_math_slope_lreg(${1:source}, ${2:from}, ${3:to})",
        "description": "The function calculates the linear regression slope of the specified range of the stream values.",
        "prefix": "indicore3_ffi.core_math_slope_lreg(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_stdev": {
        "body": "indicore3_ffi.core_math_stdev(${1:source}, ${2:from}, ${3:to})",
        "description": "The function calculates the standard deviation of the values of the range of the stream values.",
        "prefix": "indicore3_ffi.core_math_stdev(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_math_sum": {
        "body": "indicore3_ffi.core_math_sum(${1:source}, ${2:from}, ${3:to})",
        "description": "The function calculates the sum of the specified range of the stream values. The function calculates the sum of the stream values specified as a range.",
        "prefix": "indicore3_ffi.core_math_sum(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_object_release": {
        "body": "indicore3_ffi.core_object_release(${1:object})",
        "description": "The function releases the object.",
        "prefix": "indicore3_ffi.core_object_release(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_parseCandle": {
        "body": "indicore3_ffi.core_parseCandle(${1:bar})",
        "description": "The function returns the identifier of the specified period time frame.",
        "prefix": "indicore3_ffi.core_parseCandle(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_touches": {
        "body": "indicore3_ffi.core_touches(${1:stream1}, ${2:stream2}, ${3:period1}, ${4:period2})",
        "description": "The function checks whether the stream touches the other stream at the specified period.",
        "prefix": "indicore3_ffi.core_touches(",
        "scope": "source.lua"
    },
    "indicore3_ffi.core_touches2": {
        "body": "indicore3_ffi.core_touches2(${1:stream1}, ${2:level}, ${3:period1})",
        "description": "The function checks whether the stream touches the specified level at the specified period.",
        "prefix": "indicore3_ffi.core_touches2(",
        "scope": "source.lua"
    },
    "indicore3_ffi.host_getTradingTable": {
        "body": "indicore3_ffi.host_getTradingTable(${1:host}, ${2:instance}, ${3:name})",
        "description": "The function returns the specified trading table.",
        "prefix": "indicore3_ffi.host_getTradingTable(",
        "scope": "source.lua"
    },
    "indicore3_ffi.indicatorinstance_update": {
        "body": "indicore3_ffi.indicatorinstance_update(${1:instance}, ${2:refreshLast})",
        "description": "The function forces the calculation of the nested indicator.",
        "prefix": "indicore3_ffi.indicatorinstance_update(",
        "scope": "source.lua"
    },
    "indicore3_ffi.indicatorinstance_updateAll": {
        "body": "indicore3_ffi.indicatorinstance_updateAll(${1:instance})",
        "description": "The function forces the complete recalculation of the nested indicator.",
        "prefix": "indicore3_ffi.indicatorinstance_updateAll(",
        "scope": "source.lua"
    },
    "indicore3_ffi.math2d_polygonToBezierShape": {
        "body": "indicore3_ffi.math2d_polygonToBezierShape(${1:polygon}, ${2:smooth_factor})",
        "description": "The function calculates a set of points for drawing the smooth bezier shape from the polygon.",
        "prefix": "indicore3_ffi.math2d_polygonToBezierShape(",
        "scope": "source.lua"
    },
    "indicore3_ffi.math2d_polylineToBezierLine": {
        "body": "indicore3_ffi.math2d_polylineToBezierLine(${1:polygon}, ${2:smooth_factor})",
        "description": "The function calculates a set of points for drawing the smooth bezier line from the polyline.",
        "prefix": "indicore3_ffi.math2d_polylineToBezierLine(",
        "scope": "source.lua"
    },
    "indicore3_ffi.math2d_scaleShiftTransform": {
        "body": "indicore3_ffi.math2d_scaleShiftTransform(${1:points1}, ${2:org}, ${3:dst}, ${4:mindx}, ${5:mindy})",
        "description": "The function performs the scale/shift transformations of the specified collection of points.",
        "prefix": "indicore3_ffi.math2d_scaleShiftTransform(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_bottom": {
        "body": "indicore3_ffi.odcontext_bottom(${1:context})",
        "description": "The function returns the Y coordinate of the bottom-right corner of the chart area.",
        "prefix": "indicore3_ffi.odcontext_bottom(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_createFont": {
        "body": "indicore3_ffi.odcontext_createFont(${1:context}, ${2:objid}, ${3:face}, ${4:width}, ${5:height}, ${6:style})",
        "description": "The function creates a GDI font.",
        "prefix": "indicore3_ffi.odcontext_createFont(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_createHatchBrush": {
        "body": "indicore3_ffi.odcontext_createHatchBrush(${1:context}, ${2:objid}, ${3:style}, ${4:color})",
        "description": "The function creates a GDI pattern brush.",
        "prefix": "indicore3_ffi.odcontext_createHatchBrush(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_createPen": {
        "body": "indicore3_ffi.odcontext_createPen(${1:context}, ${2:objid}, ${3:style}, ${4:width}, ${5:color})",
        "description": "The function creates a GDI pen.",
        "prefix": "indicore3_ffi.odcontext_createPen(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_createSolidBrush": {
        "body": "indicore3_ffi.odcontext_createSolidBrush(${1:context}, ${2:objid}, ${3:color})",
        "description": "The function creates a GDI colored brush.",
        "prefix": "indicore3_ffi.odcontext_createSolidBrush(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_deleteObject": {
        "body": "indicore3_ffi.odcontext_deleteObject(${1:context}, ${2:objid})",
        "description": "The function deletes a GDI object.",
        "prefix": "indicore3_ffi.odcontext_deleteObject(",
        "scope": "source.lua"
    },
    ":type": {
        "body": ":type()",
        "description": "The method returns the type (Line, Dot, Bar) of the output stream representation on the chart.",
        "prefix": ":type(",
        "scope": "source.lua"
    },
    ":addLevel": {
        "body": ":addLevel(${1:level}${2:[, style?{3:[, width?${4:[, color?]}]}]})",
        "description": "The method adds a level (horizontal line) to supplement the stream on the chart.",
        "prefix": ":addLevel(",
        "scope": "source.lua"
    },
    ":getBookmark": {
        "body": ":getBookmark(${1:bookmark})",
        "description": "The method returns the index of the previously bookmarked period.",
        "prefix": ":getBookmark(",
        "scope": "source.lua"
    },
    ":set": {
        "body": ":set(${1:index}, ${2:value})",
        "description": "The method sets the value to the specified period of the output stream.",
        "prefix": ":set(",
        "scope": "source.lua"
    },
    ":setBookmark": {
        "body": ":setBookmark(${1:bookmark}, ${2:period})",
        "description": "The method sets/removes a bookmark on the specified period in the output stream.",
        "prefix": ":setBookmark(",
        "scope": "source.lua"
    },
    ":setBreak": {
        "body": ":setBreak(${1:index}, ${2:break})",
        "description": "The method defines whether the specified period of the stream is drawn on a chart.",
        "prefix": ":setBreak(",
        "scope": "source.lua"
    },
    ":setColor": {
        "body": ":setColor(${1:index}, ${2:color})",
        "description": "The method sets the color of the stream graphical representation on the chart (line, bar, dot).",
        "prefix": ":setColor(",
        "scope": "source.lua"
    },
    ":setPrecision": {
        "body": ":setPrecision(${1:precision})",
        "description": "The method sets the precision (a number of digits after the decimal point) for the output stream values.",
        "prefix": ":setPrecision(",
        "scope": "source.lua"
    },
    ":setStyle": {
        "body": ":setStyle(${1:style})",
        "description": "The method sets the style of the line that represents the stream on the chart.",
        "prefix": ":setStyle(",
        "scope": "source.lua"
    },
    ":setVisible": {
        "body": ":setVisible(${1:visible})",
        "description": "The method defines whether the stream is drawn on a chart.",
        "prefix": ":setVisible(",
        "scope": "source.lua"
    },
    ":setWidth": {
        "body": ":setWidth(${1:width})",
        "description": "The method sets the width of a stream graphical representation of the chart.",
        "prefix": ":setWidth(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_drawArc": {
        "body": "indicore3_ffi.odcontext_drawArc(${1:context}, ${2:pen}, ${3:brush}, ${4:x1}, ${5:y1}, ${6:x2}, ${7:y2}, ${8:x3}, ${9:y3}, ${10:x4}, ${11:y4}, ${12:transparency})",
        "description": "The function draws an arc.",
        "prefix": "indicore3_ffi.odcontext_drawArc(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_drawEllipse": {
        "body": "indicore3_ffi.odcontext_drawEllipse(${1:context}, ${2:pen}, ${3:brush}, ${4:x1}, ${5:y1}, ${6:x2}, ${7:y2}, ${8:transparency})",
        "description": "The function draws an ellipse.",
        "prefix": "indicore3_ffi.odcontext_drawEllipse(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_drawGradientRectangle": {
        "body": "indicore3_ffi.odcontext_drawGradientRectangle(${1:context}, ${2:x1}, ${3:y1}, ${4:color1}, ${5:x2}, ${6:y2}, ${7:color2}, ${8:x3}, ${9:y3}, ${10:color3}, ${11:x4}, ${12:y4}, ${13:color4}, ${14:transparency})",
        "description": "The function draws a gradient-filled rectangle.",
        "prefix": "indicore3_ffi.odcontext_drawGradientRectangle(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_drawIcon": {
        "body": "indicore3_ffi.odcontext_drawIcon(${1:context}, ${2:objid}, ${3:x}, ${4:y}, ${5:transparency})",
        "description": "The function draws an icon.",
        "prefix": "indicore3_ffi.odcontext_drawIcon(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_drawLine": {
        "body": "indicore3_ffi.odcontext_drawLine(${1:context}, ${2:pen}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2}, ${7:transparency})",
        "description": "The function draws a line.",
        "prefix": "indicore3_ffi.odcontext_drawLine(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_drawPicture": {
        "body": "indicore3_ffi.odcontext_drawPicture(${1:context}, ${2:objid}, ${3:x}, ${4:y}, ${5:transparency})",
        "description": "The function draws a picture.",
        "prefix": "indicore3_ffi.odcontext_drawPicture(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_drawPictureTransparantBackground": {
        "body": "indicore3_ffi.odcontext_drawPictureTransparantBackground(${1:context}, ${2:objid}, ${3:x}, ${4:y}, ${5:transparency})",
        "description": "The function draws a picture and use the specified color as a transparent background.",
        "prefix": "indicore3_ffi.odcontext_drawPictureTransparantBackground(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_drawPolygon": {
        "body": "indicore3_ffi.odcontext_drawPolygon(${1:context}, ${2:pen}, ${3:brush}, ${4:points}, ${5:transparency})",
        "description": "The function draws a polygon.",
        "prefix": "indicore3_ffi.odcontext_drawPolygon(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_drawPolyline": {
        "body": "indicore3_ffi.odcontext_drawPolyline(${1:context}, ${2:pen}, ${3:points}, ${4:transparency})",
        "description": "The function draws a polyline (a multi-segment zigzag line).",
        "prefix": "indicore3_ffi.odcontext_drawPolyline(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_drawRectangle": {
        "body": "indicore3_ffi.odcontext_drawRectangle(${1:context}, ${2:pen}, ${3:brush}, ${4:x1}, ${5:y1}, ${6:x2}, ${7:y2}, ${8:transparency})",
        "description": "The function draws a rectangle.",
        "prefix": "indicore3_ffi.odcontext_drawRectangle(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_drawText": {
        "body": "indicore3_ffi.odcontext_drawText(${1:context}, ${2:font}, ${3:text}, ${4:color}, ${5:background}, ${6:x1}, ${7:y1}, ${8:x2}, ${9:y2}, ${10:style}, ${11:transparency})",
        "description": "The function draws a text.",
        "prefix": "indicore3_ffi.odcontext_drawText(",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_firstBar": {
        "body": "indicore3_ffi.odcontext_firstBar(${1:context})",
        "description": "The function returns the index of the first period of the indicator source stream that is visible on the chart.",
        "prefix": "indicore3_ffi.odcontext_firstBar(",
        "scope": "source.lua"
    },
    ".parameters": {
        "body": ".parameters",
        "description": "The parameters.",
        "prefix": ".parameters",
        "scope": "source.lua"
    },
    ".source": {
        "body": ".source",
        "description": "The property returns the source stream of the indicator.",
        "prefix": ".source",
        "scope": "source.lua"
    },
    ":addCopyStream": {
        "body": "instance::addCopyStream(${1:id}, ${2|core.Dot,core.Line,core.Bar|}, ${3:fullName}, ${4:label}, ${5:color}, ${6:style}, ${7:width}, ${8:hoffset}, ${9:voffset}, ${10:voosetrel}, ${11:offstlevels}, ${12:stream})",
        "description": "The method creates a copy of the specified output stream. The copy is shifted against the original stream horizontally and vertically by the specified levels.",
        "prefix": "addCopyStream",
        "scope": "source.lua"
    },
    "addInternalStream": {
        "body": "instance:addInternalStream(${1:firstPeriod}, ${2:extent})",
        "description": "The method adds an output stream for the indicator internal purposes.",
        "prefix": "addInternalStream",
        "scope": "source.lua"
    },
    "addStream": {
        "body": "${1:id} = instance:addStream(${1:id}, ${2|core.Dot,core.Line,core.Bar|}, ${3:fullName}, ${4:label}, ${5:color}, ${6:firstPeriod}, ${7:extent})",
        "description": "The method adds an output stream to the indicator.",
        "prefix": "addStream",
        "scope": "source.lua"
    },
    "addStreamClipboard": {
        "body": "${CLIPBOARD:id} = instance:addStream(${CLIPBOARD:id}, ${1|core.Dot,core.Line,core.Bar|}, ${2:fullName}, ${3:label}, ${4:color}, ${5:firstPeriod}, ${6:extent})",
        "description": "The method adds an output stream to the indicator.",
        "prefix": "addStreamClipboard",
        "scope": "source.lua"
    },
    "addStreamOscillator": {
        "body": 
        [
            "${1:id} = instance:addStream(${1:id}, ${2|core.Dot,core.Line,core.Bar|}, ${3:fullName}, ${4:label}, ${5:color}, ${6:firstPeriod}, ${7:extent})",
            "${1:id}:setPrecision(math.max(2, instance.source:getPrecision()));"
        ],
        "description": "The method adds an output stream to the indicator.",
        "prefix": "addStreamOscillator",
        "scope": "source.lua"
    },
    "addStreamOscillatorClipboard": {
        "body": 
        [
            "${CLIPBOARD:id} = instance:addStream(${CLIPBOARD:id}, ${1|core.Dot,core.Line,core.Bar|}, ${2:fullName}, ${3:label}, ${4:color}, ${5:firstPeriod}, ${6:extent})",
            "${CLIPBOARD:id}:setPrecision(math.max(2, instance.source:getPrecision()));"
        ],
        "description": "The method adds an output stream to the indicator.",
        "prefix": "addStreamOscillatorClipboard",
        "scope": "source.lua"
    },
    "assignParamClipboard": {
        "body": "${CLIPBOARD:param_name} = instance.parameters.${CLIPBOARD:param_name};",
        "description": "Assign a parameter (use clipboard).",
        "prefix": "assignParam",
        "scope": "source.lua"
    },
    "assignParam": {
        "body": "${1:param_name} = instance.parameters.${1:param_name};",
        "description": "Assign a parameter.",
        "prefix": "assignParam",
        "scope": "source.lua"
    },
    "addStreamStyled": {
        "body": 
        [
            "${1:stream_name} = instance:addStream(${2:id}, ${3|core.Dot,core.Line,core.Bar|}, ${4:fullName}, ${5:label}, ${6:color}, ${7:firstPeriod}, ${8:extent});",
            "${1:stream_name}:setWidth(${9:width});",
            "${1:stream_name}:setStyle(${10:style});"
        ],
        "description": "The method adds an output stream to the indicator.",
        "prefix": "addStreamStyled",
        "scope": "source.lua"
    },
    ":addViewBar": {
        "body": ":addViewBar(${1:date})",
        "description": "The method adds a period into the output streams of the the view indicator.",
        "prefix": ":addViewBar",
        "scope": "source.lua"
    },
    ":createCandleGroup": {
        "body": ":createCandleGroup(${1:label}, ${2:id}, ${3:open}, ${4:high}, ${5:low}, ${6:close}${7:[, volume?${8:[, barSize?${9:[, isBar?]}]}]})",
        "description": "The method groups four or five output streams into a candle.",
        "prefix": ":createCandleGroup",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_indexOfBar": {
        "body": "indicore3_ffi.odcontext_indexOfBar(${1:context}, ${2:x})",
        "description": "The function returns the index of the period by the period x-coordinate on the chart.",
        "prefix": "indicore3_ffi.odcontext_indexOfBar",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_lastBar": {
        "body": "indicore3_ffi.odcontext_lastBar(${1:context})",
        "description": "The function returns the index of the last period of the indicator source stream that is visible on the chart.",
        "prefix": "indicore3_ffi.odcontext_lastBar",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_left": {
        "body": "indicore3_ffi.odcontext_left(${1:context})",
        "description": "The function returns the X coordinate of the top-left corner of the chart area.",
        "prefix": "indicore3_ffi.odcontext_left",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_loadIcon": {
        "body": "indicore3_ffi.odcontext_loadIcon(${1:context}, ${2:objid}, ${3:accessor}, ${4:filename})",
        "description": "The function loads a GDI icon from the file.",
        "prefix": "indicore3_ffi.odcontext_loadIcon",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_loadPicture": {
        "body": "indicore3_ffi.odcontext_loadPicture(${1:context}, ${2:objid}, ${3:accessor}, ${4:filename})",
        "description": "The function loads a GDI picture from the file.",
        "prefix": "indicore3_ffi.odcontext_loadPicture",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_maxPrice": {
        "body": "indicore3_ffi.odcontext_maxPrice(${1:context})",
        "description": "The function returns a maximum value on the chart vertical axis which is visible on the chart.",
        "prefix": "indicore3_ffi.odcontext_maxPrice",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_measureText": {
        "body": "indicore3_ffi.odcontext_measureText(${1:context})",
        "description": "The function returns a maximum value on the chart vertical axis which is visible on the chart.",
        "prefix": "indicore3_ffi.odcontext_measureText",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_minPrice": {
        "body": "indicore3_ffi.odcontext_minPrice(${1:context})",
        "description": "The function returns a minimum value on the chart vertical axis which is visible on the chart.",
        "prefix": "indicore3_ffi.odcontext_minPrice",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_nextBar": {
        "body": "indicore3_ffi.odcontext_nextBar(${1:context}, ${2:nb})",
        "description": "The function returns the coordinates of the next period in the enumeration of the visible periods.",
        "prefix": "indicore3_ffi.odcontext_nextBar",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_pixelsToPoints": {
        "body": "indicore3_ffi.odcontext_pixelsToPoints(${1:context}, ${2:pixels})",
        "description": "The fucntion converts the pixels into the polygraphic points.",
        "prefix": "indicore3_ffi.odcontext_pixelsToPoints",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_pointOfPrice": {
        "body": "indicore3_ffi.odcontext_pointOfPrice(${1:context}, ${2:price})",
        "description": "The function returns the y-coordinate of the value of the vertical axis on the chart.",
        "prefix": "indicore3_ffi.odcontext_pointOfPrice",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_pointsToPixels": {
        "body": "indicore3_ffi.odcontext_pointsToPixels(${1:context}, ${2:points})",
        "description": "The function converts the polygraphic points into the pixels.",
        "prefix": "indicore3_ffi.odcontext_pointsToPixels",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_positionOfBar": {
        "body": "indicore3_ffi.odcontext_positionOfBar(${1:context}, ${2:index}. ${3:p})",
        "description": "The function returns the coordinates of the period on the chart by the period index.",
        "prefix": "indicore3_ffi.odcontext_positionOfBar",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_priceWidth": {
        "body": "indicore3_ffi.odcontext_priceWidth(${1:context}, ${2:from}, ${3:to})",
        "description": "The function returns the width of the price band in pixels.",
        "prefix": "indicore3_ffi.odcontext_priceWidth",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_right": {
        "body": "indicore3_ffi.odcontext_right(${1:context})",
        "description": "The function returns the X coordinate of the bottom-right corner of the chart area.",
        "prefix": "indicore3_ffi.odcontext_right",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_setPixel": {
        "body": "indicore3_ffi.odcontext_setPixel(${1:context}, ${2:x}, ${3:y}, ${4:color}, ${5:transparency})",
        "description": "The function draws a pixel on the chart.",
        "prefix": "indicore3_ffi.odcontext_setPixel",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_startEnumeration": {
        "body": "indicore3_ffi.odcontext_startEnumeration(${1:context})",
        "description": "The function initializes the enumeration of the visible periods on the chart.",
        "prefix": "indicore3_ffi.odcontext_startEnumeration",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_tooltip": {
        "body": "indicore3_ffi.odcontext_tooltip(${1:context}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:text})",
        "description": "The function creates a tooltip to be shown when the mouse cursor stops over the specified area.",
        "prefix": "indicore3_ffi.odcontext_tooltip",
        "scope": "source.lua"
    },
    "indicore3_ffi.odcontext_top": {
        "body": "indicore3_ffi.odcontext_top(${1:context})",
        "description": "The function returns the Y coordinate of the top-left corner of the chart area.",
        "prefix": "indicore3_ffi.odcontext_top",
        "scope": "source.lua"
    },
    "indicore3_ffi.odpoints_addPoint": {
        "body": "indicore3_ffi.odpoints_addPoint(${1:context})",
        "description": "The function returns the Y coordinate of the top-left corner of the chart area.",
        "prefix": "indicore3_ffi.odpoints_addPoint",
        "scope": "source.lua"
    },
    "indicore3_ffi.odpoints_addXY": {
        "body": "indicore3_ffi.odpoints_addXY(${1:points}, ${2:index}, ${3:x}, ${4:y})",
        "description": "The function adds a new point to the end of the collection.",
        "prefix": "indicore3_ffi.odpoints_addXY",
        "scope": "source.lua"
    },
    "indicore3_ffi.odpoints_allocate": {
        "body": "indicore3_ffi.odpoints_allocate(${1:points}, ${2:n})",
        "description": "The function allocate memory for the specified number of points of the specified collection.",
        "prefix": "indicore3_ffi.odpoints_allocate",
        "scope": "source.lua"
    },
    ":createChannelGroup": {
        "body": ":createChannelGroup(${1:label}, ${2:id}, ${3:first}, ${4:second}, ${5:color}, ${6:alpha}${7:[, mode?]})",
        "description": "The method groups two output streams into a channel.",
        "prefix": ":createChannelGroup",
        "scope": "source.lua"
    },
    ":createFromToBarGroup": {
        "body": ":createFromToBarGroup(${1:label}, ${2:id}, ${3:first}, ${4:second}, ${5:color})",
        "description": "The method groups two output streams into a from/to bar.",
        "prefix": ":createFromToBarGroup",
        "scope": "source.lua"
    },
    ":createTextOutput": {
        "body": ":createTextOutput(${1:label}, ${2:id}, ${3:font}, ${4:size}, ${5:halign}, ${6:valign}, ${7:color}, ${8:extent})",
        "description": "The method adds an text output stream to the indicator.",
        "prefix": ":createTextOutput",
        "scope": "source.lua"
    },
    ":drawOnMainChart": {
        "body": ":drawOnMainChart(${1:ownerDrawnFlag})",
        "description": "The method notifies the host application that the indicator is an owner drawn indicator and it uses the main chart area.",
        "prefix": ":drawOnMainChart",
        "scope": "source.lua"
    },
    ":initView": {
        "body": ":initView(${1:instrument}, ${2:precision}, ${3:pointSize}, ${4:isBid}, ${5:isAlive})",
        "description": "The method initializes the output stream of a view indicator.",
        "prefix": ":initView",
        "scope": "source.lua"
    },
    ":name": {
        "body": ":name()",
        "description": "The method sets the name of the indicator instance.",
        "prefix": ":name",
        "scope": "source.lua"
    },
    ":ownerDrawn": {
        "body": ":ownerDrawn(${1:ownerDrawnFlag})",
        "description": "The method notifies the host application that the indicator is an owner drawn indicator.",
        "prefix": ":ownerDrawn",
        "scope": "source.lua"
    },
    ":setLabelColor": {
        "body": ":setLabelColor(${1:color})",
        "description": "The method sets the color of the indicator label.",
        "prefix": ":setLabelColor",
        "scope": "source.lua"
    },
    ":updateFrom": {
        "body": ":updateFrom(${1:period})",
        "description": "The method forces recalculation of the indicator output streams starting at the specified period.",
        "prefix": ":updateFrom",
        "scope": "source.lua"
    },
    "indicore3_ffi.odpoints_create": {
        "body": "indicore3_ffi.odpoints_create()",
        "description": "The function creates an empty collection of points. The collection is used by the ffi functions to draw polylines and polygons.",
        "prefix": "indicore3_ffi.odpoints_create",
        "scope": "source.lua"
    },
    "indicore3_ffi.odpoints_get": {
        "body": "indicore3_ffi.odpoints_get(${1:points}, ${2:index}, ${3:lp})",
        "description": "The function returns the coordinates of the specified point of the collection by the point index.",
        "prefix": "indicore3_ffi.odpoints_get",
        "scope": "source.lua"
    },
    "indicore3_ffi.odpoints_setPoint": {
        "body": "indicore3_ffi.odpoints_setPoint(${1:points}, ${2:index}, ${3:lp})",
        "description": "The function sets the coordinates to the existing point of the collection. The coordinates are defined as a structure.",
        "prefix": "indicore3_ffi.odpoints_setPoint",
        "scope": "source.lua"
    },
    "indicore3_ffi.odpoints_setXY": {
        "body": "indicore3_ffi.odpoints_setXY(${1:points}, ${2:index}, ${3:x}, ${4:y})",
        "description": "The function sets the coordinates to the existing point of the collection.",
        "prefix": "indicore3_ffi.odpoints_setXY",
        "scope": "source.lua"
    },
    "indicore3_ffi.odpoints_size": {
        "body": "indicore3_ffi.odpoints_size(${1:points})",
        "description": "The function returns the number of points in the collection.",
        "prefix": "indicore3_ffi.odpoints_size",
        "scope": "source.lua"
    },
    "indicore3_ffi.outputstream_getBreak": {
        "body": "indicore3_ffi.outputstream_getBreak(${1:stream}, ${2:index})",
        "description": "The function checks whether the specified period of the output stream is drawn on the chart (a break is set).",
        "prefix": "indicore3_ffi.outputstream_getBreak",
        "scope": "source.lua"
    },
    "indicore3_ffi.outputstream_getColor": {
        "body": "indicore3_ffi.outputstream_getColor(${1:stream}, ${2:index})",
        "description": "The function returns the color of the stream graphical representation on the chart (line, bar, dot).",
        "prefix": "indicore3_ffi.outputstream_getColor",
        "scope": "source.lua"
    },
    "indicore3_ffi.outputstream_setBreak": {
        "body": "indicore3_ffi.outputstream_setBreak(${1:stream}, ${2:index}, ${3:lbreak})",
        "description": "The function defines whether the specified period of the stream is drawn on the chart.",
        "prefix": "indicore3_ffi.outputstream_setBreak",
        "scope": "source.lua"
    },
    "indicore3_ffi.outputstreamimpl_getBookmark": {
        "body": "indicore3_ffi.outputstreamimpl_getBookmark(${1:stream}, ${2:bk})",
        "description": "The function returns the index of the previously bookmarked period.",
        "prefix": "indicore3_ffi.outputstreamimpl_getBookmark",
        "scope": "source.lua"
    },
    "indicore3_ffi.outputstreamimpl_set": {
        "body": "indicore3_ffi.outputstreamimpl_set(${1:stream}, ${2:index}, ${3:value})",
        "description": "The function sets the value to the specified period of the output stream.",
        "prefix": "indicore3_ffi.outputstreamimpl_set",
        "scope": "source.lua"
    },
    "indicore3_ffi.outputstreamimpl_setBookmark": {
        "body": "indicore3_ffi.outputstreamimpl_setBookmark(${1:stream}, ${2:bk}, ${3:index})",
        "description": "The function sets/removes a bookmark on the specified period in the output stream.",
        "prefix": "indicore3_ffi.outputstreamimpl_setBookmark",
        "scope": "source.lua"
    },
    "indicore3_ffi.outputstreamimpl_setColor": {
        "body": "indicore3_ffi.outputstreamimpl_setColor(${1:stream}, ${2:index}, ${3:value})",
        "description": "The function sets the color of the stream graphical representation on the chart at the specified period (line, bar, dot).",
        "prefix": "indicore3_ffi.outputstreamimpl_setColor",
        "scope": "source.lua"
    },
    "indicore3_ffi.parameterconstant_delete": {
        "body": "indicore3_ffi.parameterconstant_delete(${1:v})",
        "description": "The function deletes a value returned by the tradingtablerow_value() or created by the parameterconstant_new_int(), parameterconstant_new_double(), parameterconstant_new_bool(), parameterconstant_new_string() functions.",
        "prefix": "indicore3_ffi.parameterconstant_delete",
        "scope": "source.lua"
    },
    "indicore3_ffi.parameterconstant_get_bool": {
        "body": "indicore3_ffi.parameterconstant_get_bool(${1:v})",
        "description": "The function converts a boolean value returned by the tradingtablerow_value() function to the Lua boolean data type.",
        "prefix": "indicore3_ffi.parameterconstant_get_bool",
        "scope": "source.lua"
    },
    "indicore3_ffi.parameterconstant_get_double": {
        "body": "indicore3_ffi.parameterconstant_get_double(${1:v})",
        "description": "The function converts a double value returned by the tradingtablerow_value() function to the Lua number data type.",
        "prefix": "indicore3_ffi.parameterconstant_get_double",
        "scope": "source.lua"
    },
    "indicore3_ffi.parameterconstant_get_int": {
        "body": "indicore3_ffi.parameterconstant_get_int(${1:v})",
        "description": "The function converts an integer value returned by the tradingtablerow_value() function to the Lua number data type.",
        "prefix": "indicore3_ffi.parameterconstant_get_int",
        "scope": "source.lua"
    },
    "indicore3_ffi.parameterconstant_get_string": {
        "body": "indicore3_ffi.parameterconstant_get_string(${1:v})",
        "description": "The function converts a sting value returned by the tradingtablerow_value() function to the Lua string data type.",
        "prefix": "indicore3_ffi.parameterconstant_get_string",
        "scope": "source.lua"
    },
    "indicore3_ffi.parameterconstant_new_bool": {
        "body": "indicore3_ffi.parameterconstant_new_bool(${1:value})",
        "description": "The function creates the boolean variable that can be passed to the indicore3_ffi.tradingtable_findAll() and indicore3_ffi.tradingtable_findRow() functions as the key parameter value.",
        "prefix": "indicore3_ffi.parameterconstant_new_bool",
        "scope": "source.lua"
    },
    "indicore3_ffi.parameterconstant_new_double": {
        "body": "indicore3_ffi.parameterconstant_new_double(${1:value})",
        "description": "The function creates the double variable that can be passed to the indicore3_ffi.tradingtable_findAll() and indicore3_ffi.tradingtable_findRow() functions as the key parameter value.",
        "prefix": "indicore3_ffi.parameterconstant_new_double",
        "scope": "source.lua"
    },
    "indicore3_ffi.parameterconstant_new_int": {
        "body": "indicore3_ffi.parameterconstant_new_int(${1:value})",
        "description": "The function creates the integer value that can be passed to the indicore3_ffi.tradingtable_findAll() and indicore3_ffi.tradingtable_findRow() functions as the key parameter value.",
        "prefix": "indicore3_ffi.parameterconstant_new_int",
        "scope": "source.lua"
    },
    "indicore3_ffi.parameterconstant_new_string": {
        "body": "indicore3_ffi.parameterconstant_new_string(${1:value})",
        "description": "The function creates the string variable that can be passed to the indicore3_ffi.tradingtable_findAll() and indicore3_ffi.tradingtable_findRow() functions as the key parameter value.",
        "prefix": "indicore3_ffi.parameterconstant_new_string",
        "scope": "source.lua"
    },
    "indicore3_ffi.stream_displayPrecision": {
        "body": "indicore3_ffi.stream_displayPrecision(${1:stream})",
        "description": "The function returns the precision (a number of digits after the decimal point) of the stream values for displaying on a chart.",
        "prefix": "indicore3_ffi.stream_displayPrecision",
        "scope": "source.lua"
    },
    "indicore3_ffi.stream_first": {
        "body": "indicore3_ffi.stream_first(${1:stream})",
        "description": "The function returns the index of the first period that contains data in the stream.",
        "prefix": "indicore3_ffi.stream_first",
        "scope": "source.lua"
    },
    "indicore3_ffi.stream_getPrice": {
        "body": "indicore3_ffi.stream_getPrice(${1:stream}, ${2:index})",
        "description": "The function returns the value of the specified period.",
        "prefix": "indicore3_ffi.stream_getPrice",
        "scope": "source.lua"
    },
    "indicore3_ffi.stream_getVolume": {
        "body": "indicore3_ffi.stream_getVolume(${1:stream}, ${2:index})",
        "description": "The function returns the trading volume of the specified period of the bar stream.",
        "prefix": "indicore3_ffi.stream_getVolume",
        "scope": "source.lua"
    },
    "indicore3_ffi.stream_isAlive": {
        "body": "indicore3_ffi.stream_isAlive(${1:stream})",
        "description": "The function checks whether the stream is subscribed for the updates.",
        "prefix": "indicore3_ffi.stream_isAlive",
        "scope": "source.lua"
    },
    "indicore3_ffi.stream_isBar": {
        "body": "indicore3_ffi.stream_isBar(${1:stream})",
        "description": "The function checks whether the stream is a bar stream.",
        "prefix": "indicore3_ffi.stream_isBar",
        "scope": "source.lua"
    },
    "indicore3_ffi.stream_isBid": {
        "body": "indicore3_ffi.stream_isBid(${1:stream})",
        "description": "The function checks which prices (bid or ask) the stream contains.",
        "prefix": "indicore3_ffi.stream_isBid",
        "scope": "source.lua"
    },
    "ownerdraw_points": {
        "body": "ownerdraw_points",
        "description": "The collection of the points for drawing polylines and polygons.",
        "prefix": "ownerdraw_points",
        "scope": "source.lua"
    },
    "ownerdraw_points.new": {
        "body": "ownerdraw_points.new()",
        "description": "Creates a new instance of the table.",
        "prefix": "ownerdraw_points.new",
        "scope": "source.lua"
    },
    "ownerdraw_points:add": {
        "body": "ownerdraw_points:add(${1:x}, ${2:y})",
        "description": "Adds a new point to the collection.",
        "prefix": "ownerdraw_points:add",
        "scope": "source.lua"
    },
    "ownerdraw_points:get": {
        "body": "ownerdraw_points:get(${1:index})",
        "description": "Returns coordinates of the point by its index.",
        "prefix": "ownerdraw_points:get",
        "scope": "source.lua"
    },
    "ownerdraw_points:set": {
        "body": "ownerdraw_points:set(${1:index}, ${2:x}, ${2:y})",
        "description": "Changes the coordinates of an existing point of the collection.",
        "prefix": "ownerdraw_points:set",
        "scope": "source.lua"
    },
    "ownerdraw_points:size": {
        "body": "ownerdraw_points:size()",
        "description": "Returns the number of points in the collection.",
        "prefix": "ownerdraw_points:size",
        "scope": "source.lua"
    },
    "indicore3_ffi.stream_name": {
        "body": "indicore3_ffi.stream_name(${1:stream})",
        "description": "Returns the number of points in the collection.",
        "prefix": "indicore3_ffi.stream_name",
        "scope": "source.lua"
    },
    "indicore3_ffi.stream_pipSize": {
        "body": "indicore3_ffi.stream_pipSize(${1:stream})",
        "description": "The function returns the smallest possible change of the instrument price.",
        "prefix": "indicore3_ffi.stream_pipSize",
        "scope": "source.lua"
    },
    "indicore3_ffi.stream_precision": {
        "body": "indicore3_ffi.stream_precision(${1:stream})",
        "description": "The function returns the precision (a number of digits after the decimal point) of the stream values.",
        "prefix": "indicore3_ffi.stream_precision",
        "scope": "source.lua"
    },
    "indicore3_ffi.stream_size": {
        "body": "indicore3_ffi.stream_size(${1:stream})",
        "description": "The function returns the number of periods in the stream.",
        "prefix": "indicore3_ffi.stream_size",
        "scope": "source.lua"
    },
    "indicore3_ffi.stream_supportsVolume": {
        "body": "indicore3_ffi.stream_supportsVolume(${1:stream})",
        "description": "The function checks whether the bar stream supports the trading volume.",
        "prefix": "indicore3_ffi.stream_supportsVolume",
        "scope": "source.lua"
    },
    "indicore3_ffi.stream_timeframe": {
        "body": "indicore3_ffi.stream_timeframe(${1:stream})",
        "description": "The function returns the time frame of the stream periods.",
        "prefix": "indicore3_ffi.stream_timeframe",
        "scope": "source.lua"
    },
    "indicore3_ffi.textoutput_getLevel": {
        "body": "indicore3_ffi.textoutput_getLevel(${1:stream}, ${2:index})",
        "description": "The function returns the numeric value of the level on the chart vertical scale at which the text label is placed.",
        "prefix": "indicore3_ffi.textoutput_getLevel",
        "scope": "source.lua"
    },
    "indicore3_ffi.textoutput_getText": {
        "body": "indicore3_ffi.textoutput_getText(${1:stream}, ${2:index})",
        "description": "The function returns the text of the label.",
        "prefix": "indicore3_ffi.textoutput_getText",
        "scope": "source.lua"
    },
    "indicore3_ffi.textoutput_size": {
        "body": "indicore3_ffi.textoutput_size(${1:stream})",
        "description": "The function returns the number of periods in the text output stream.",
        "prefix": "indicore3_ffi.textoutput_size",
        "scope": "source.lua"
    },
    "indicore3_ffi.textoutputimpl_set": {
        "body": "indicore3_ffi.textoutputimpl_set(${1:stream}, ${2:index}, ${3:price}, ${4:text}, ${5:tt}, ${6:color})",
        "description": "The function sets the text label at the specified level and the specified period.",
        "prefix": "indicore3_ffi.textoutputimpl_set",
        "scope": "source.lua"
    },
    "indicore3_ffi.textoutputimpl_setNoData": {
        "body": "indicore3_ffi.textoutputimpl_setNoData(${1:stream}, ${2:index})",
        "description": "The function removes the text label from the specified period.",
        "prefix": "indicore3_ffi.textoutputimpl_setNoData",
        "scope": "source.lua"
    },
    "indicore3_ffi.thisindicatorinstance_updateFrom": {
        "body": "indicore3_ffi.thisindicatorinstance_updateFrom(${1:instance}, ${2:period})",
        "description": "The function forces the calculation of the indicator output streams starting at the specified period.",
        "prefix": "indicore3_ffi.thisindicatorinstance_updateFrom",
        "scope": "source.lua"
    },
    "indicore3_ffi.thisindicatorinstance_view_addBar": {
        "body": "indicore3_ffi.thisindicatorinstance_view_addBar(${1:instance}, ${2:date})",
        "description": "The function adds a bar into the output streams of the the view indicator.",
        "prefix": "indicore3_ffi.thisindicatorinstance_view_addBar",
        "scope": "source.lua"
    },
    "indicore3_ffi.tradingtable_enumerator": {
        "body": "indicore3_ffi.tradingtable_enumerator(${1:table})",
        "description": "The function creates an enumerator for the specified trading table.",
        "prefix": "indicore3_ffi.tradingtable_enumerator",
        "scope": "source.lua"
    },
    "indicore3_ffi.tradingtable_findAll": {
        "body": "indicore3_ffi.tradingtable_findAll(${1:table}, ${2:column}, ${3:key})",
        "description": "The function searches the trading table for rows with the specifies column value.",
        "prefix": "indicore3_ffi.tradingtable_findAll",
        "scope": "source.lua"
    },
    "indicore3_ffi.tradingtable_findRow": {
        "body": "indicore3_ffi.tradingtable_findRow(${1:table}, ${2:column}, ${3:key})",
        "description": "The function searches the trading table for a row with the specified column value.",
        "prefix": "indicore3_ffi.tradingtable_findRow",
        "scope": "source.lua"
    },
    "indicore3_ffi.tradingtable_version": {
        "body": "indicore3_ffi.tradingtable_version(${1:table})",
        "description": "The function returns a version of the table content. The version changes each time when a row is added or deleted from the table.",
        "prefix": "indicore3_ffi.tradingtable_version",
        "scope": "source.lua"
    },
    "indicore3_ffi.tradingtableenumerator_next": {
        "body": "indicore3_ffi.tradingtableenumerator_next(${1:enumerator})",
        "description": "The function returns the next row of the table by using the specified enumerator.",
        "prefix": "indicore3_ffi.tradingtableenumerator_next",
        "scope": "source.lua"
    },
    "indicore3_ffi.tradingtableenumerator_reset": {
        "body": "indicore3_ffi.tradingtableenumerator_reset(${1:enumerator})",
        "description": "The function resets the specified enumerator.",
        "prefix": "indicore3_ffi.tradingtableenumerator_reset",
        "scope": "source.lua"
    },
    "indicore3_ffi.tradingtablerow_refresh": {
        "body": "indicore3_ffi.tradingtablerow_refresh(${1:row})",
        "description": "The function refreshes the data in the specified row.",
        "prefix": "indicore3_ffi.tradingtablerow_refresh",
        "scope": "source.lua"
    },
    "indicore3_ffi.tradingtablerow_value": {
        "body": "indicore3_ffi.tradingtablerow_value(${1:row})",
        "description": "The function refreshes the data in the specified row.",
        "prefix": "indicore3_ffi.tradingtablerow_value",
        "scope": "source.lua"
    },
    "indicore3_ffi:odcontext_drawBezierLine": {
        "body": "indicore3_ffi:odcontext_drawBezierLine(${1:row})",
        "description": "The function refreshes the data in the specified row.",
        "prefix": "indicore3_ffi:odcontext_drawBezierLine",
        "scope": "source.lua"
    },
    "indicore3_ffi:odcontext_drawBezierShape": {
        "body": "indicore3_ffi:odcontext_drawBezierShape(${1:context}, ${2:pen}, ${3:brush}, ${4:points}, ${5:transparency})",
        "description": "The function draws and fills a cubic Bezier shape.",
        "prefix": "indicore3_ffi:odcontext_drawBezierShape",
        "scope": "source.lua"
    },
    "indicore3_ffi:odcontext_resetClipRectangle": {
        "body": "indicore3_ffi:odcontext_resetClipRectangle(${1:context})",
        "description": "The function removes clip rectangle.",
        "prefix": "indicore3_ffi:odcontext_resetClipRectangle",
        "scope": "source.lua"
    },
    "indicore3_ffi:odcontext_setClipRectangle": {
        "body": "indicore3_ffi:odcontext_setClipRectangle(${1:context}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom})",
        "description": "The function sets a clip rectangle.",
        "prefix": "indicore3_ffi:odcontext_setClipRectangle",
        "scope": "source.lua"
    },
    "interop": {
        "body": "interop",
        "description": "The Lua interoperation.",
        "prefix": "interop",
        "scope": "source.lua"
    },
    "interop:instance": {
        "body": "interop:instance(${1:index})",
        "description": "Gets an instance by the index.",
        "prefix": "interop:instance",
        "scope": "source.lua"
    },
    "interop:isalive": {
        "body": "interop:isalive(${1:instance})",
        "description": "Checks whether interop instance is alive.",
        "prefix": "interop:isalive",
        "scope": "source.lua"
    },
    "interop:size": {
        "body": "interop:size()",
        "description": "Gets number of instances currently executed.",
        "prefix": "interop:size",
        "scope": "source.lua"
    },
    ":indicatorOutput": {
        "body": ":indicatorOutput()",
        "description": "Gets the output streams of the indicator.",
        "prefix": ":indicatorOutput",
        "scope": "source.lua"
    },
    ":invoke": {
        "body": ":invoke(${1:name}, ${2:...})",
        "description": "Invokes a verb to the other instance.",
        "prefix": ":invoke",
        "scope": "source.lua"
    },
    ":isIndicator": {
        "body": ":isIndicator()",
        "description": "Checks whether the interop instance is an indicator.",
        "prefix": ":isIndicator",
        "scope": "source.lua"
    },
    "math2d": {
        "body": "math2d",
        "description": "Two-dimensional geometry calculations.",
        "prefix": "math2d",
        "scope": "source.lua"
    },
    "math2d.cartesianToPolar": {
        "body": "math2d.cartesianToPolar(${1:x}, ${2:y})",
        "description": "Converts Cartesian coordinates into polar coordinates.",
        "prefix": "math2d.cartesianToPolar",
        "scope": "source.lua"
    },
    "math2d.isPointInRect": {
        "body": "math2d.isPointInRect(${1:x}, ${2:y}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2})",
        "description": "Checks whether a point is inside the rectangle.",
        "prefix": "math2d.isPointInRect",
        "scope": "source.lua"
    },
    "math2d.isPointOnLine": {
        "body": "math2d.isPointOnLine(${1:x}, ${2:y}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2})",
        "description": "Checks whether a point belongs to a line.",
        "prefix": "math2d.isPointOnLine",
        "scope": "source.lua"
    },
    "math2d.isPointOnSegment": {
        "body": "math2d.isPointOnSegment(${1:x}, ${2:y}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2})",
        "description": "Checks whether a point belongs to a segment.",
        "prefix": "math2d.isPointOnSegment",
        "scope": "source.lua"
    },
    "math2d.lineEllipseIntersection": {
        "body": "math2d.lineEllipseIntersection(${1:ex1}, ${2:ey1}, ${3:ex2}, ${4:ey2}, ${5:lx1}, ${6:ly1}, ${7:lx2}, ${8:ly2})",
        "description": "Calculates the intersection points of a line and an ellipse.",
        "prefix": "math2d.lineEllipseIntersection",
        "scope": "source.lua"
    },
    "math2d.lineEquation": {
        "body": "math2d.lineEquation(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2})",
        "description": "Calculates coefficients of the line equation.",
        "prefix": "math2d.lineEquation",
        "scope": "source.lua"
    },
    "math2d.lineIntersection": {
        "body": "math2d.lineIntersection(${1:l1x1}, ${2:l1y1}, ${3:l1x2}, ${4:l1y2}, ${5:l2x1}, ${6:l2y1}, ${7:l2x2}, ${8:l2y2})",
        "description": "Calculates the intersection point of two lines.",
        "prefix": "math2d.lineIntersection",
        "scope": "source.lua"
    },
    "math2d.lineRectangleIntersection": {
        "body": "math2d.lineRectangleIntersection(${1:rx1}, ${2:ry1}, ${3:rx2}, ${4:ry2}, ${5:lx1}, ${6:ly1}, ${7:lx2}, ${8:ly2})",
        "description": "Calculates the intersection points of a line and a rectangle.",
        "prefix": "math2d.lineRectangleIntersection",
        "scope": "source.lua"
    },
    "math2d.polarToCartesian": {
        "body": "math2d.polarToCartesian(${1:r}, ${2:p})",
        "description": "Converts polar coordinates into Cartesian coordinates.",
        "prefix": "math2d.polarToCartesian",
        "scope": "source.lua"
    },
    "math2d.polygonToBezierShape": {
        "body": "math2d.polygonToBezierShape(${1:points}, ${2:smooth})",
        "description": "Calculates a point set for drawing a smooth bezier shape from polygon.",
        "prefix": "math2d.polygonToBezierShape",
        "scope": "source.lua"
    },
    "math2d.polylineToBezierLine": {
        "body": "math2d.polylineToBezierLine(${1:points}, ${2:smooth})",
        "description": "Calculate a point set for drawing a smooth bezier line from a polyline.",
        "prefix": "math2d.polylineToBezierLine",
        "scope": "source.lua"
    },
    "math2d.projectPointOnLine": {
        "body": "math2d.projectPointOnLine(${1:x}, ${2:y}, ${3:x1}, ${4:y1}, ${5:x2}, ${6:y2})",
        "description": "Finds a projection of the point on the line.",
        "prefix": "math2d.projectPointOnLine",
        "scope": "source.lua"
    },
    "math2d.scaleShiftTransform": {
        "body": "math2d.scaleShiftTransform(${1:points}, ${2:base_points}, ${3:base_points_projected}${4:[, xfilter?${5:[, yfilter?]]}})",
        "description": "Performs scale/shift transformations of the set of points.",
        "prefix": "math2d.scaleShiftTransform",
        "scope": "source.lua"
    },
    "math2d.segmentIntersection": {
        "body": "math2d.segmentIntersection(${1:l1x1}, ${2:l1y1}, ${3:l1x2}, ${4:l1y2}, ${5:l2x1}, ${6:l2y1}, ${7:l2x2}, ${8:l2y2})",
        "description": "Calculates the intersection point of segments lines.",
        "prefix": "math2d.segmentIntersection",
        "scope": "source.lua"
    },
    "math2d.segmentRectangleIntersection": {
        "body": "math2d.segmentRectangleIntersection(${1:rx1}, ${2:ry1}, ${3:rx2}, ${4:ry2}, ${5:lx1}, ${6:ly1}, ${7:lx2}, ${8:ly2})",
        "description": "Calculates the intersection points of a segment and a rectangle.",
        "prefix": "math2d.segmentRectangleIntersection",
        "scope": "source.lua"
    },
    "mathex": {
        "body": "mathex",
        "description": "The extended mathematical functions.",
        "prefix": "mathex",
        "scope": "source.lua"
    },
    "mathex.avg": {
        "body": "mathex.avg(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Calculates the average value of the stream values in the specified range.",
        "prefix": "mathex.avg",
        "scope": "source.lua"
    },
    "mathex.betaDist": {
        "body": "mathex.betaDist(${1:x}, ${2:a}, ${3:b})",
        "description": "Returns the beta distribution.",
        "prefix": "mathex.betaDist",
        "scope": "source.lua"
    },
    "mathex.betaDistInv": {
        "body": "mathex.betaDistInv(${1:p}, ${2:a}, ${3:b})",
        "description": "Returns the inverse beta distribution.",
        "prefix": "mathex.betaDistInv",
        "scope": "source.lua"
    },
    "mathex.binomDist": {
        "body": "mathex.binomDist(${1:trials}, ${2:succeeds}, ${3:p})",
        "description": "Returns the individual term binomial distribution probability.",
        "prefix": "mathex.binomDist",
        "scope": "source.lua"
    },
    "mathex.cfft": {
        "body": "mathex.cfft(${1:array})",
        "description": "Performs fast complex fourier transform.",
        "prefix": "mathex.cfft",
        "scope": "source.lua"
    },
    "mathex.chiDist": {
        "body": "mathex.chiDist(${1:x}, ${2:n})",
        "description": "Returns the one-tailed probability of the chi-squared distribution.",
        "prefix": "mathex.chiDist",
        "scope": "source.lua"
    },
    "mathex.correl": {
        "body": "mathex.correl(${1:first_stream}, ${2:second_stream}, ${3:first_from}, ${4:first_to}, ${5:second_from}, ${6:second_to})",
        "description": "Calculates the correlation coefficient between two streams in the specified ranges.",
        "prefix": "mathex.correl",
        "scope": "source.lua"
    },
    "pane": {
        "body": "pane",
        "description": "The pane information.",
        "prefix": "pane",
        "scope": "source.lua"
    },
    "pane.Data": {
        "body": "pane.Data",
        "description": "Gets the pane data.",
        "prefix": "pane.Data",
        "scope": "source.lua"
    },
    ":getStream": {
        "body": ":getStream()",
        "description": "The method returns stream of the specified index for pane.",
        "prefix": ":getStream",
        "scope": "source.lua"
    },
    ":getStreamCount": {
        "body": ":getStreamCount()",
        "description": "The method returns the number of stream in the pane.",
        "prefix": ":getStreamCount",
        "scope": "source.lua"
    },
    "mathex.covar": {
        "body": "mathex.covar(${1:first_stream}, ${2:second_stream}, ${3:first_from}, ${4:first_to}, ${5:second_from}, ${6:second_to})",
        "description": "Calculates the covariance between two streams in the specified ranges.",
        "prefix": "mathex.covar",
        "scope": "source.lua"
    },
    "mathex.devsq": {
        "body": "mathex.devsq(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Calculates the sum of squares of deviations of data points from their sample mean of the stream values in the specified range.",
        "prefix": "mathex.devsq",
        "scope": "source.lua"
    },
    "mathex.expDist": {
        "body": "mathex.expDist(${1:x}, ${2:lambda})",
        "description": "Returns the exponential distribution.",
        "prefix": "mathex.expDist",
        "scope": "source.lua"
    },
    "mathex.fDist": {
        "body": "mathex.fDist(${1:x}, ${2:n}, {3:m})",
        "description": "Returns the F probability distribution.",
        "prefix": "mathex.fDist",
        "scope": "source.lua"
    },
    "mathex.fDistInv": {
        "body": "mathex.fDistInv(${1:x}, ${2:n}, {3:m})",
        "description": "Returns the inverse F probability distribution.",
        "prefix": "mathex.fDistInv",
        "scope": "source.lua"
    },
    "mathex.fft": {
        "body": "mathex.fft(${1:array})",
        "description": "Performs fast real fourier transform.",
        "prefix": "mathex.fft",
        "scope": "source.lua"
    },
    "mathex.gammaDist": {
        "body": "mathex.gammaDist(${1:x}, ${2:a}, ${3:scale})",
        "description": "Returns the gamma distribution.",
        "prefix": "mathex.gammaDist",
        "scope": "source.lua"
    },
    "mathex.gammaln": {
        "body": "mathex.gammaln(${1:x})",
        "description": "Returns the natural logarithm of the gamma function.",
        "prefix": "mathex.gammaln",
        "scope": "source.lua"
    },
    "mathex.geomean": {
        "body": "mathex.geomean(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Calculates the geometric mean value of the stream values in the specified range.",
        "prefix": "mathex.geomean",
        "scope": "source.lua"
    },
    "mathex.icfft": {
        "body": "mathex.icfft(${1:array})",
        "description": "Performs inverse fast complex fourier transform.",
        "prefix": "mathex.icfft",
        "scope": "source.lua"
    },
    "mathex.ifft": {
        "body": "mathex.ifft(${1:array})",
        "description": "Performs inverse fast real fourier transform.",
        "prefix": "mathex.ifft",
        "scope": "source.lua"
    },
    "mathex.kurt": {
        "body": "mathex.kurt(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Calculates the kurtosis of a distribution of the stream values in the specified range.",
        "prefix": "mathex.kurt",
        "scope": "source.lua"
    },
    "mathex.lreg": {
        "body": "mathex.lreg(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Calculates the linear regression value of the stream values in the specified range.",
        "prefix": "mathex.lreg",
        "scope": "source.lua"
    },
    "mathex.lregSlope": {
        "body": "mathex.lregSlope(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Calculates the linear regression slope of the stream values in the specified range.",
        "prefix": "mathex.lregSlope",
        "scope": "source.lua"
    },
    "mathex.lwma": {
        "body": "mathex.lwma(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Calculates the linear-weighted average value of the stream values in the specified range.",
        "prefix": "mathex.lwma",
        "scope": "source.lua"
    },
    "mathex.makeArray": {
        "body": "mathex.makeArray(${1:size})",
        "description": "Creates static 1-dimension array of numbers.",
        "prefix": "mathex.makeArray",
        "scope": "source.lua"
    },
    "mathex.max2": {
        "body": "mathex.max2(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Finds two maximal values and their positions in the specified stream and in the specified range.",
        "prefix": "mathex.max2",
        "scope": "source.lua"
    },
    "mathex.meandev": {
        "body": "mathex.meandev(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Calculates the mean deviation of the stream values in the specified range.",
        "prefix": "mathex.meandev",
        "scope": "source.lua"
    },
    "mathex.median_s": {
        "body": "mathex.median_s(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Calculates the median value using sort function.",
        "prefix": "mathex.median_s",
        "scope": "source.lua"
    },
    "mathex.median_w": {
        "body": "mathex.median_w(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Calculates the median value using Wirth's Kth-minimum function.",
        "prefix": "mathex.median_w",
        "scope": "source.lua"
    },
    "mathex.min2": {
        "body": "mathex.min2(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Finds two minimal values and their positions in the specified stream and in the specified range.",
        "prefix": "mathex.min2",
        "scope": "source.lua"
    },
    "mathex.minmax": {
        "body": "mathex.minmax(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Finds both the minimal and the maximal value in the range.",
        "prefix": "mathex.minmax",
        "scope": "source.lua"
    },
    "mathex.normalDist": {
        "body": "mathex.normalDist(${1:x}, ${2:mean}, ${3:variation})",
        "description": "Returns the normal distribution.",
        "prefix": "mathex.normalDist",
        "scope": "source.lua"
    },
    "mathex.poissonDist": {
        "body": "mathex.poissonDist(${1:x}, ${2:mean})",
        "description": "Returns the Poisson's distribution.",
        "prefix": "mathex.poissonDist",
        "scope": "source.lua"
    },
    "mathex.regChannel": {
        "body": "mathex.regChannel(${1:x}, ${2:mean})",
        "description": "Calculate the regression channel parameters.",
        "prefix": "mathex.regChannel",
        "scope": "source.lua"
    },
    "mathex.skew": {
        "body": "mathex.skew(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Calculates the skewness of a distribution of the stream values in the specified range.",
        "prefix": "mathex.skew",
        "scope": "source.lua"
    },
    "mathex.stdev": {
        "body": "mathex.stdev(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Calculates the standard deviation of the values of the stream values in the specified range.",
        "prefix": "mathex.stdev",
        "scope": "source.lua"
    },
    "mathex.studentDist": {
        "body": "mathex.studentDist(${1:x}, ${2:n})",
        "description": "Returns the Student's two-tailed t-distribution.",
        "prefix": "mathex.studentDist",
        "scope": "source.lua"
    },
    "mathex.sum": {
        "body": "mathex.sum(${1:stream}, ${2:range}${3:[, to?]})",
        "description": "Calculates the sum of the stream values in the specified range.",
        "prefix": "mathex.sum",
        "scope": "source.lua"
    },
    "mathex.weibullDist": {
        "body": "mathex.weibullDist(${1:x}, ${2:a}, ${3:variation})",
        "description": "Returns the Weibull's distribution.",
        "prefix": "mathex.weibullDist",
        "scope": "source.lua"
    },
    "parameters": {
        "body": "parameters",
        "description": "The indicator or strategy or tool parameters.",
        "prefix": "parameters",
        "scope": "source.lua"
    },
    "parameters.new": {
        "body": "parameters.new()",
        "description": "Creates a new instance of a parameters table.",
        "prefix": "parameters.new",
        "scope": "source.lua"
    },
    "parameters:addColor": {
        "body": "parameters:addColor(${1:id}, ${2:name}, ${3:description}, ${4:defaultValue})",
        "description": "Adds a new color parameter.",
        "prefix": "parameters:addColor",
        "scope": "source.lua"
    },
    "parameters:addDate": {
        "body": "parameters:addDate(${1:id}, ${2:name}, ${3:description}, ${4:defaultValue})",
        "description": "Adds a date or date/time parameter.",
        "prefix": "parameters:addDate",
        "scope": "source.lua"
    },
    "parameters:addDouble": {
        "body": "parameters:addDouble(${1:id}, ${2:name}, ${3:description}, ${4:defaultValue}${5:[, minimalValue${6:[, maximalValue]]}})",
        "description": "Adds a new double parameter.",
        "prefix": "parameters:addDouble",
        "scope": "source.lua"
    },
    "parameters:addFile": {
        "body": "parameters:addFile(${1:id}, ${2:name}, ${3:description}, ${4:defaultValue})",
        "description": "Adds a file parameter.",
        "prefix": "parameters:addFile",
        "scope": "source.lua"
    },
    "indicatorAddBooleanParam": {
        "body": "indicator.parameters:addBoolean(${1:id}, ${2:name}, ${3:description}, ${4:defaultValue})",
        "description": "Adds a new boolean parameter.",
        "prefix": "indicatorAddBooleanParam",
        "scope": "source.lua"
    },
    "strategyAddBooleanParam": {
        "body": "strategy.parameters:addBoolean(${1:id}, ${2:name}, ${3:description}, ${4:defaultValue})",
        "description": "Adds a new boolean parameter.",
        "prefix": "strategyAddBooleanParam",
        "scope": "source.lua"
    },
    "indicatorAddBooleanParamClipboard": {
        "body": "indicator.parameters:addBoolean(${CLIPBOARD:id}, ${1:name}, ${2:description}, ${3:defaultValue})",
        "description": "Adds a new boolean parameter.",
        "prefix": "indicatorAddBooleanParamClipboard",
        "scope": "source.lua"
    },
    "strategyAddBooleanParamClipboard": {
        "body": "strategy.parameters:addBoolean(${CLIPBOARD:id}, ${1:name}, ${2:description}, ${3:defaultValue})",
        "description": "Adds a new boolean parameter.",
        "prefix": "strategyAddBooleanParamClipboard",
        "scope": "source.lua"
    },
    "addLineParams": {
        "body": 
        [
            "indicator.parameters:addColor(\"${1:id}_color\", \"${2:name} Color\", \"${3:description} Color\", ${4:defaultValue});",
            "indicator.parameters:addInteger(\"${1:id}_width\", \"${2:name} Width\", \"${3:description} Width\", ${5:1}, 1, 5);",
            "indicator.parameters:addInteger(\"${1:id}_style\", \"${2:name} Style\", \"${3:description} Style\", ${6|core.LINE_SOLID,core.LINE_NONE,core.LINE_DASH,core.LINE_DOT,core.LINE_DASHDOT|});",
            "indicator.parameters:setFlag(\"${1:id}_style\", core.FLAG_LINE_STYLE);"
        ],
        "description": "Adds new line parameter: color, width, style.",
        "prefix": "addLineParams",
        "scope": "source.lua"
    },
    "addLineParamsClipboard": {
        "body": 
        [
            "indicator.parameters:addColor(\"${CLIPBOARD:id}_color\", \"${1:name} Color\", \"${2:description} Color\", ${3:defaultValue});",
            "indicator.parameters:addInteger(\"${CLIPBOARD:id}_width\", \"${1:name} Width\", \"${2:description} Width\", ${4:1}, 1, 5);",
            "indicator.parameters:addInteger(\"${CLIPBOARD:id}_style\", \"${1:name} Style\", \"${2:description} Style\", ${5|core.LINE_SOLID,core.LINE_NONE,core.LINE_DASH,core.LINE_DOT,core.LINE_DASHDOT|});",
            "indicator.parameters:setFlag(\"${CLIPBOARD:id}_style\", core.FLAG_LINE_STYLE);"
        ],
        "description": "Adds new line parameter: color, width, style.",
        "prefix": "addLineParamsClipboard",
        "scope": "source.lua"
    },
    "addLineWidthParam": {
        "body": "indicator.parameters:addInteger(\"${1:id}\", \"${2:name}\", \"${3:description}\", ${4:1}, 1, 5)",
        "description": "Adds a new line style parameter.",
        "prefix": "addLineWidthParam",
        "scope": "source.lua"
    },
    "addLineWidthParamClipboard": {
        "body": "indicator.parameters:addInteger(\"${CLIPBOARD:id}\", \"${1:name}\", \"${2:description}\", ${3:1}, 1, 5)",
        "description": "Adds a new line style parameter.",
        "prefix": "addLineWidthParamClipboard",
        "scope": "source.lua"
    },
    "addLineStyleParam": {
        "body": 
        [
            "indicator.parameters:addInteger(\"${1:id}\", \"${2:name}\", \"${3:description}\", ${4|core.LINE_SOLID,core.LINE_NONE,core.LINE_DASH,core.LINE_DOT,core.LINE_DASHDOT|});",
            "indicator.parameters:setFlag(\"${1:id}\", core.FLAG_LINE_STYLE);"
        ],
        "description": "Adds a new line style parameter.",
        "prefix": "addLineStyleParam",
        "scope": "source.lua"
    },
    "addLineStyleParamClipboard": {
        "body": 
        [
            "indicator.parameters:addInteger(\"${CLIPBOARD:id}\", \"${1:name}\", \"${2:description}\", ${3|core.LINE_SOLID,core.LINE_NONE,core.LINE_DASH,core.LINE_DOT,core.LINE_DASHDOT|});",
            "indicator.parameters:setFlag(\"${CLIPBOARD:id}\", core.FLAG_LINE_STYLE);"
        ],
        "description": "Adds a new line style parameter.",
        "prefix": "addLineStyleParamClipboard",
        "scope": "source.lua"
    },
    "parameters:addInteger": {
        "body": "parameters:addInteger(${1:id}, ${2:name}, ${3:description}, ${4:defaultValue}${5:[, minimalValue${6:[, maximalValue]]}})",
        "description": "Adds a new integer parameter.",
        "prefix": "parameters:addInteger",
        "scope": "source.lua"
    },
    "parameters:addString": {
        "body": "parameters:addString(${1:id}, ${2:name}, ${3:description}, ${4:defaultValue})",
        "description": "Adds a new string parameter.",
        "prefix": "parameters:addString",
        "scope": "source.lua"
    },
    "parameters:getBoolean": {
        "body": "parameters:getBoolean(${1:id})",
        "description": "Gets a boolean value of the indicator parameter.",
        "prefix": "parameters:getBoolean",
        "scope": "source.lua"
    },
    "parameters:addGroup": {
        "body": "parameters:addGroup(${1:name})",
        "description": "Starts the group of the parameters.",
        "prefix": "parameters:addGroup",
        "scope": "source.lua"
    },
    "parameters:addIntegerAlternative": {
        "body": "parameters:addIntegerAlternative(${1:id}, ${2:name}, ${3:description}, ${4:value})",
        "description": "Adds an alternative for the integer parameter.",
        "prefix": "parameters:addIntegerAlternative",
        "scope": "source.lua"
    },
    "parameters:addStringAlternative": {
        "body": "parameters:addStringAlternative(${1:id}, ${2:name}, ${3:description}, ${4:value})",
        "description": "Adds an alternative for the string parameter.",
        "prefix": "parameters:addStringAlternative",
        "scope": "source.lua"
    },
    "parameters:getColor": {
        "body": "parameters:getColor(${1:id})",
        "description": "Gets a color value of the indicator parameter.",
        "prefix": "parameters:getColor",
        "scope": "source.lua"
    },
    "parameters:getCustomParameters": {
        "body": "parameters:getCustomParameters()",
        "description": "Gets information about the parameters set associated with this parameter.",
        "prefix": "parameters:getCustomParameters",
        "scope": "source.lua"
    },
    "parameters:getDouble": {
        "body": "parameters:getDouble(${1:id})",
        "description": "Gets a real number value of the indicator parameter.",
        "prefix": "parameters:getDouble",
        "scope": "source.lua"
    },
    "parameters:getFile": {
        "body": "parameters:getFile(${1:id})",
        "description": "Gets a file name value of the indicator parameter.",
        "prefix": "parameters:getFile",
        "scope": "source.lua"
    },
    "parameters:getInteger": {
        "body": "parameters:getInteger(${1:id})",
        "description": "Gets an integer value of the indicator parameter.",
        "prefix": "parameters:getInteger",
        "scope": "source.lua"
    },
    "parameters:getString": {
        "body": "parameters:getString(${1:id})",
        "description": "Gets a string value of the indicator parameter.",
        "prefix": "parameters:getString",
        "scope": "source.lua"
    },
    "parameters:setBoolean": {
        "body": "parameters:setBoolean(${1:id}, ${2:value})",
        "description": "Sets a boolean value of the indicator parameter.",
        "prefix": "parameters:setBoolean",
        "scope": "source.lua"
    },
    "parameters:setColor": {
        "body": "parameters:setColor(${1:id}, ${2:value})",
        "description": "Sets a real number value of the indicator parameter.",
        "prefix": "parameters:setColor",
        "scope": "source.lua"
    },
    "parameters:setFlag": {
        "body": "parameters:setFlag(${1:id}, ${2:flag})",
        "description": "Sets the parameter's flag.",
        "prefix": "parameters:setFlag",
        "scope": "source.lua"
    },
    "parameters:setInteger": {
        "body": "parameters:setInteger(${1:id}, ${2:value})",
        "description": "Sets an integer value of the indicator parameter.",
        "prefix": "parameters:setInteger",
        "scope": "source.lua"
    },
    "parameters:setString": {
        "body": "parameters:setString(${1:id}, ${2:value})",
        "description": "Sets a string value of the indicator parameter.",
        "prefix": "parameters:setString",
        "scope": "source.lua"
    },
    "profile": {
        "body": "profile",
        "description": "The profile of other indicator.",
        "prefix": "profile",
        "scope": "source.lua"
    },
    "profile:createInstance": {
        "body": "profile:createInstance(${1:source}, ${2:parameters})",
        "description": "Creates a new instance of the indicator.",
        "prefix": "profile:createInstance",
        "scope": "source.lua"
    },
    "profile:description": {
        "body": "profile:description()",
        "description": "Gets the description of the indicator.",
        "prefix": "profile:description",
        "scope": "source.lua"
    },
    "profile:id": {
        "body": "profile:id()",
        "description": "Gets the unique identifier of the indicator.",
        "prefix": "profile:id",
        "scope": "source.lua"
    },
    "profile:name": {
        "body": "profile:name()",
        "description": "Gets the name of the indicator.",
        "prefix": "profile:name",
        "scope": "source.lua"
    },
    "profile:parameters": {
        "body": "profile:parameters()",
        "description": "Gets a set of the parameters.",
        "prefix": "profile:parameters",
        "scope": "source.lua"
    },
    "profile:profileLanguage": {
        "body": "profile:profileLanguage()",
        "description": "Gets the language of the profile (Lua, JavaScript, C++ for Windows).",
        "prefix": "profile:profileLanguage",
        "scope": "source.lua"
    },
    "profile:profileType": {
        "body": "profile:profileType()",
        "description": "Gets the type of the profile (Indicator, Strategy).",
        "prefix": "profile:profileType",
        "scope": "source.lua"
    },
    "profile:requiredSource": {
        "body": "profile:requiredSource()",
        "description": "Gets the type of the required source of the indicator.",
        "prefix": "profile:requiredSource",
        "scope": "source.lua"
    },
    "profile:type": {
        "body": "profile:type()",
        "description": "Gets the type of the indicator.",
        "prefix": "profile:type",
        "scope": "source.lua"
    },
    "terminal": {
        "body": "terminal",
        "description": "The table which is used to get access to the trading terminal functions.",
        "prefix": "terminal",
        "scope": "source.lua"
    },
    "terminal:alertEmail": {
        "body": "terminal:alertEmail(${1:email}, ${2:subject}, {$3:text})",
        "description": "Sends an e-mail.",
        "prefix": "terminal:alertEmail",
        "scope": "source.lua"
    },
    "terminal:alertMessage": {
        "body": "terminal:alertMessage(${1:instrument}, ${2:price}, {$3:message}, ${4:time})",
        "description": "Shows a alert (signal) message.",
        "prefix": "terminal:alertMessage",
        "scope": "source.lua"
    },
    "terminal:alertSound": {
        "body": "terminal:alertSound(${1:file}, ${2:recurrent})",
        "description": "Plays a sound.",
        "prefix": "terminal:alertSound",
        "scope": "source.lua"
    },
    "terminal:execute": {
        "body": "terminal:execute(${1:cookie}, ${2:valuemap})",
        "description": "Executes the command.",
        "prefix": "terminal:execute",
        "scope": "source.lua"
    },
    "color (text output)": {
        "body": ":color()",
        "description": "The method returns the color of the labels.",
        "prefix": ":color",
        "scope": "source.lua"
    },
    "font (text output)": {
        "body": ":font()",
        "description": "The method returns the name and the size of the font that is used to draw the labels.",
        "prefix": ":font",
        "scope": "source.lua"
    },
    "get (text output)": {
        "body": ":get(${1:index})",
        "description": "The method returns the text label that is set at the specified period.",
        "prefix": ":get",
        "scope": "source.lua"
    },
    "halign (text output)": {
        "body": ":halign()",
        "description": "The method returns the horizontal alignment of the text labels.",
        "prefix": ":halign",
        "scope": "source.lua"
    },
    "hasData (text output)": {
        "body": ":hasData()",
        "description": "The method checks whether the specified period of the stream has a text label.",
        "prefix": ":hasData",
        "scope": "source.lua"
    },
    "id (text output)": {
        "body": ":id()",
        "description": "The method returns the identifier of the text output stream.",
        "prefix": ":id",
        "scope": "source.lua"
    },
    "label (text output)": {
        "body": ":label()",
        "description": "The method returns the short name of the text output stream.",
        "prefix": ":label",
        "scope": "source.lua"
    },
    "size (text output)": {
        "body": ":size()",
        "description": "The method returns the number of periods in the text output stream.",
        "prefix": ":size",
        "scope": "source.lua"
    },
    "valign (text output)": {
        "body": ":valign()",
        "description": "The method returns the vertical alignment of the labels.",
        "prefix": ":valign",
        "scope": "source.lua"
    },
    "set (text output impl)": {
        "body": ":set(${1:index}, ${2:level}, ${3:label}${4:[, tooltip?${5:[, color?]}]})",
        "description": "The method sets the text label at the specified level and the specified period.",
        "prefix": ":set",
        "scope": "source.lua"
    },
    "setNoData (text output impl)": {
        "body": ":setNoData(${1:index})",
        "description": "The method removes the text label from the specified period.",
        "prefix": ":setNoData",
        "scope": "source.lua"
    },
    "barSize (tick stream)": {
        "body": ":barSize()",
        "description": "The method returns the time frame of the stream periods.",
        "prefix": ":barSize",
        "scope": "source.lua"
    },
    "date (tick stream)": {
        "body": ":date()",
        "description": "The method returns the date and time of the specified period.",
        "prefix": ":date",
        "scope": "source.lua"
    },
    "first (tick stream)": {
        "body": ":first()",
        "description": "The method returns the index of the first period that contains data in the stream.",
        "prefix": ":first",
        "scope": "source.lua"
    },
    "getDisplayPrecision (tick stream)": {
        "body": ":getDisplayPrecision()",
        "description": "The method returns the precision (a number of digits after the decimal point) of the stream values for displaying on a chart.",
        "prefix": ":getDisplayPrecision",
        "scope": "source.lua"
    },
    "getPrecision (tick stream)": {
        "body": ":getPrecision()",
        "description": "The method returns the precision (a number of digits after the decimal point) of the stream values.",
        "prefix": ":getPrecision",
        "scope": "source.lua"
    },
    "hasData (tick stream)": {
        "body": ":hasData()",
        "description": "The method checks whether the specified period of the stream has data.",
        "prefix": ":hasData",
        "scope": "source.lua"
    },
    "instrument (tick stream)": {
        "body": ":instrument()",
        "description": "The method returns the name of the instrument the prices of which the stream provides.",
        "prefix": ":instrument",
        "scope": "source.lua"
    },
    "isAlive (tick stream)": {
        "body": ":isAlive()",
        "description": "The method checks whether the stream is subscribed for the updates, i.e. the stream is \"alive\".",
        "prefix": ":isAlive",
        "scope": "source.lua"
    },
    "isBar (tick stream)": {
        "body": ":isBar()",
        "description": "The method checks whether the stream is a bar stream.",
        "prefix": ":isBar",
        "scope": "source.lua"
    },
    "isBid (tick stream)": {
        "body": ":isBid()",
        "description": "The method checks which prices (bid or ask) the stream provides.",
        "prefix": ":isBid",
        "scope": "source.lua"
    },
    "name (tick stream)": {
        "body": ":name()",
        "description": "The method returns the name of the stream.",
        "prefix": ":name",
        "scope": "source.lua"
    },
    "serial (tick stream)": {
        "body": ":serial({$1:index})",
        "description": "The method returns the unique identifier of the specified period.",
        "prefix": ":serial",
        "scope": "source.lua"
    },
    "size (tick stream)": {
        "body": ":size({$1:index})",
        "description": "The method returns the number of periods in the stream.",
        "prefix": ":size",
        "scope": "source.lua"
    },
    "tick (tick stream)": {
        "body": ":tick({$1:index})",
        "description": "The method returns the value of the specified period.",
        "prefix": ":tick",
        "scope": "source.lua"
    },
    "tool": {
        "body": "tool",
        "description": "The profile of the tool available at the moment of its initialization.",
        "prefix": "tool",
        "scope": "source.lua"
    },
    "tool.creationStrategy": {
        "body": "tool.creationStrategy",
        "description": "Returns the instance of the creation strategy table.",
        "prefix": "tool.creationStrategy",
        "scope": "source.lua"
    },
    "tool.parameters": {
        "body": "tool.parameters",
        "description": "Returns the instance of the profile parameter set.",
        "prefix": "tool.parameters",
        "scope": "source.lua"
    },
    "tool:description": {
        "body": "tool:description(${1:description})",
        "description": "Sets the description.",
        "prefix": "tool:description",
        "scope": "source.lua"
    },
    "tool:icon": {
        "body": "tool:icon(${1:path})",
        "description": "Associate a custom icon with the tool.",
        "prefix": "tool:icon",
        "scope": "source.lua"
    },
    "tool:setTag": {
        "body": "tool:setTag(${1:name}, ${2:value})",
        "description": "Sets the tag value.",
        "prefix": "tool:setTag",
        "scope": "source.lua"
    },
    "tool:name": {
        "body": "tool:name(${1:name})",
        "description": "Sets the name.",
        "prefix": "tool:name",
        "scope": "source.lua"
    },
    "enumTable": {
        "body": 
        [ 
            "local ${2:enum} = core.host:findTable(\"${1:offers|orders|trades|closed trades}\"):enumerator();",
            "local ${3:row} = ${2:enum}:next();",
            "while ${3:row} ~= nil do",
            "    ${3:row} = ${2:enum}:next();",
            "end" 
        ],
        "description": "Enumerates a table",
        "prefix": "enumTable",
        "scope": "source.lua"
    },
    "enumerator (tradingtable)": {
        "body": ":enumerator()",
        "description": "Creates a new enumerator for the table.",
        "prefix": ":enumerator",
        "scope": "source.lua"
    },
    "find (tradingtable)": {
        "body": ":find(${1:column}, ${2:key})",
        "description": "Finds a row in the table.",
        "prefix": ":find",
        "scope": "source.lua"
    },
    "findAll (tradingtable)": {
        "body": ":findAll(${1:column}, ${2:key})",
        "description": "Finds rows in the table by the specified value.",
        "prefix": ":findAll",
        "scope": "source.lua"
    },
    "version (tradingtable)": {
        "body": ":version()",
        "description": "Returns the version of the table content.",
        "prefix": ":version",
        "scope": "source.lua"
    },
    "next (tradingtable enum)": {
        "body": ":next()",
        "description": "Returns the next row of the table.",
        "prefix": ":next",
        "scope": "source.lua"
    },
    "reset (tradingtable enum)": {
        "body": ":reset()",
        "description": "Resets the enumerator.",
        "prefix": ":reset",
        "scope": "source.lua"
    },
    "cell (tradingtable row)": {
        "body": ":cell(${1:name})",
        "description": "Gets a column's value of the row.",
        "prefix": ":cell",
        "scope": "source.lua"
    },
    "refresh (tradingtable row)": {
        "body": ":refresh()",
        "description": "Refreshes the data of the row.",
        "prefix": ":refresh",
        "scope": "source.lua"
    },
    "xmldocument": {
        "body": "xmldocument",
        "description": "The XML document in DOM model.",
        "prefix": "xmldocument",
        "scope": "source.lua"
    },
    "xmldocument.root": {
        "body": "xmldocument.root",
        "description": "Gets the root element of the document.",
        "prefix": "xmldocument.root",
        "scope": "source.lua"
    },
    "xmlelement": {
        "body": "xmlelement",
        "description": "The XML element in DOM model.",
        "prefix": "xmlelement",
        "scope": "source.lua"
    },
    "attributesCount (xmlelement)": {
        "body": ":attributesCount()",
        "description": "Gets number of attributes in the element.",
        "prefix": ":attributesCount",
        "scope": "source.lua"
    },
    "elementsCount (xmlelement)": {
        "body": ":elementsCount()",
        "description": "Gets number of elements in the element.",
        "prefix": ":elementsCount",
        "scope": "source.lua"
    },
    "findAttribute (xmlelement)": {
        "body": ":findAttribute({1:name}{2:[, namespace?]})",
        "description": "Gets attribute by the name.",
        "prefix": ":findAttribute",
        "scope": "source.lua"
    },
    "getAttribute (xmlelement)": {
        "body": ":getAttribute({1:index})",
        "description": "Gets attribute by the index.",
        "prefix": ":getAttribute",
        "scope": "source.lua"
    },
    "getElement (xmlelement)": {
        "body": ":getElement({1:index})",
        "description": "Gets children element by the index.",
        "prefix": ":getElement",
        "scope": "source.lua"
    },
    "getNode (xmlelement)": {
        "body": ":getNode({1:index})",
        "description": "Gets node by the index.",
        "prefix": ":getNode",
        "scope": "source.lua"
    },
    "nodesCount (xmlelement)": {
        "body": ":nodesCount()",
        "description": "Gets number of nodes in the element.",
        "prefix": ":nodesCount",
        "scope": "source.lua"
    },
    "text (xmlelement)": {
        "body": ":text()",
        "description": "Gets the text inside the element",
        "prefix": ":text",
        "scope": "source.lua"
    },
    "endCDATA (xmlhandler)": {
        "body": ".endCDATA()",
        "description": "Receives notification of the end of the CDATA section.",
        "prefix": ".endCDATA",
        "scope": "source.lua"
    },
    "endNamespace (xmlhandler)": {
        "body": ".endNamespace()",
        "description": "Receives notification of the end of the XML name space scope.",
        "prefix": ".endNamespace",
        "scope": "source.lua"
    },
    "processingInstruction (xmlhandler)": {
        "body": ".processingInstruction(${1:target}, ${2:data})",
        "description": "Receives notification of the XML processing instruction.",
        "prefix": ".processingInstruction",
        "scope": "source.lua"
    },
    "startNamespace (xmlhandler)": {
        "body": ".startNamespace(${1:prefix}, ${2:uri})",
        "description": "Receives notification of the start of the XML name space scope.",
        "prefix": ".startNamespace",
        "scope": "source.lua"
    },
    "characters (xmlhandler)": {
        "body": ":characters(${1:data})",
        "description": "Receives notification of character data inside an element.",
        "prefix": ":characters",
        "scope": "source.lua"
    },
    "comment (xmlhandler)": {
        "body": ":comment(${1:data})",
        "description": "Receives notification of XML comment.",
        "prefix": ":comment",
        "scope": "source.lua"
    },
    "endElement (xmlhandler)": {
        "body": ":endElement(${1:name})",
        "description": "Receives notification of the end of an element.",
        "prefix": ":endElement",
        "scope": "source.lua"
    },
    "startCDATA (xmlhandler)": {
        "body": ":startCDATA()",
        "description": "Receives notification of the begin of the CDATA section.",
        "prefix": ":startCDATA",
        "scope": "source.lua"
    },
    "startElement (xmlhandler)": {
        "body": ":startElement(${1:name}, ${2:attributes})",
        "description": "Receives notification of the start of an element.",
        "prefix": ":startElement",
        "scope": "source.lua"
    },
    "namespaceURI (xmlnode)": {
        "body": ".namespaceURI()",
        "description": "Gets node name space.",
        "prefix": ".namespaceURI",
        "scope": "source.lua"
    },
    "fullName (xmlnode)": {
        "body": ":fullName()",
        "description": "Gets full name of the node.",
        "prefix": ":fullName",
        "scope": "source.lua"
    },
    "hasNamespace (xmlnode)": {
        "body": ":hasNamespace()",
        "description": "Checks whether node has name space.",
        "prefix": ":hasNamespace",
        "scope": "source.lua"
    },
    "name (xmlnode)": {
        "body": ":name()",
        "description": "Gets node name.",
        "prefix": ":name",
        "scope": "source.lua"
    },
    "prefix (xmlnode)": {
        "body": ":prefix()",
        "description": "Gets node name space prefix.",
        "prefix": ":prefix",
        "scope": "source.lua"
    },
    "value (xmlnode)": {
        "body": ":value()",
        "description": "Gets the value of the node.",
        "prefix": ":value",
        "scope": "source.lua"
    },
    "type (xmlnode)": {
        "body": ":type()",
        "description": "Gets the type of the node.",
        "prefix": ":type",
        "scope": "source.lua"
    },
    "context.tooltip": {
        "body": "context.tooltip(${1:left}, ${2:top}, ${3:right}, ${4:bottom}, ${5:text})",
        "description": "Creates a new tooltip to be shown when the mouse cursor stops over the area specified.",
        "prefix": "context.tooltip",
        "scope": "source.lua"
    }
}